<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Introduction on Showcase Template</title><link>https://visualcomputing.github.io/showcase/</link><description>Recent content in Introduction on Showcase Template</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://visualcomputing.github.io/showcase/index.xml" rel="self" type="application/rss+xml"/><item><title>Creating a New Theme</title><link>https://visualcomputing.github.io/showcase/posts/creating-a-new-theme/</link><pubDate>Sun, 28 Sep 2014 00:00:00 +0000</pubDate><guid>https://visualcomputing.github.io/showcase/posts/creating-a-new-theme/</guid><description>Introduction # This tutorial will show you how to create a simple theme in Hugo. I assume that you are familiar with HTML, the bash command line, and that you are comfortable using Markdown to format content. I&amp;rsquo;ll explain how Hugo uses templates and how you can organize your templates to create a theme. I won&amp;rsquo;t cover using CSS to style your theme.
We&amp;rsquo;ll start with creating a new site with a very basic template.</description></item><item><title>Migrate to Hugo from Jekyll</title><link>https://visualcomputing.github.io/showcase/posts/migrate-from-jekyll/</link><pubDate>Mon, 10 Mar 2014 00:00:00 +0000</pubDate><guid>https://visualcomputing.github.io/showcase/posts/migrate-from-jekyll/</guid><description>Move static content to static # Jekyll has a rule that any directory not starting with _ will be copied as-is to the _site output. Hugo keeps all static content under static. You should therefore move it all there. With Jekyll, something that looked like
▾ &amp;lt;root&amp;gt;/ ▾ images/ logo.png should become
▾ &amp;lt;root&amp;gt;/ ▾ static/ ▾ images/ logo.png Additionally, you&amp;rsquo;ll want any files that should reside at the root (such as CNAME) to be moved to static.</description></item><item><title>(Hu)go Template Primer</title><link>https://visualcomputing.github.io/showcase/posts/goisforlovers/</link><pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate><guid>https://visualcomputing.github.io/showcase/posts/goisforlovers/</guid><description>Hugo uses the excellent Go html/template library for its template engine. It is an extremely lightweight engine that provides a very small amount of logic. In our experience that it is just the right amount of logic to be able to create a good static website. If you have used other template systems from different languages or frameworks you will find a lot of similarities in Go templates.
This document is a brief primer on using Go templates.</description></item><item><title>Getting Started with Hugo</title><link>https://visualcomputing.github.io/showcase/posts/hugoisforlovers/</link><pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate><guid>https://visualcomputing.github.io/showcase/posts/hugoisforlovers/</guid><description>Step 1. Install Hugo # Go to Hugo releases and download the appropriate version for your OS and architecture.
Save it somewhere specific as we will be using it in the next step.
More complete instructions are available at Install Hugo
Step 2. Build the Docs # Hugo has its own example site which happens to also be the documentation site you are reading right now.
Follow the following steps:</description></item><item><title/><link>https://visualcomputing.github.io/showcase/docs/shortcodes/Alex/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://visualcomputing.github.io/showcase/docs/shortcodes/Alex/</guid><description>Alex Jose Alberto Barreto Cajica # Interests # Desarrollo de software, computacion en la nube, Big Data, BlockChain.
Contacto # aabarretoc@unal.edu.co</description></item><item><title/><link>https://visualcomputing.github.io/showcase/docs/shortcodes/Hardware-Rasterization/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://visualcomputing.github.io/showcase/docs/shortcodes/Hardware-Rasterization/</guid><description>Rasterization # Is the process of taking an image, described in a vector graphics format and converting it into a series of pixels, dots, or almost any shape.
When these shapes are together, they will form the original image.
Vector graphics are a set of mathematical statements which place lines shapes in a 3d or 2d enviroment, being generally a group of mathematical curves, these are great for printing or image manipulation, even when enlarger they retain detail and quality, while raster graphics uses bitmaps to store information, this can limit the quality depending on resolution and file size.</description></item><item><title/><link>https://visualcomputing.github.io/showcase/docs/shortcodes/Julian/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://visualcomputing.github.io/showcase/docs/shortcodes/Julian/</guid><description>Julian Pereira # Interests # Desarollo Web / / Front End
Fútbol / / Medios de caracter Audiovisual ( Series, Peliculas, Ánime, Videojuegos ) / / Animales
Contact # jpereirap@unal.edu.co https://github.com/Nzone56</description></item><item><title/><link>https://visualcomputing.github.io/showcase/docs/shortcodes/Kevin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://visualcomputing.github.io/showcase/docs/shortcodes/Kevin/</guid><description>Kevin Leonardo Alvarez Mora # Interests # Web development, Cybersecurity, Data Science
Contacto # klalvarezm@unal.edu.co</description></item><item><title/><link>https://visualcomputing.github.io/showcase/docs/shortcodes/Rasterization/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://visualcomputing.github.io/showcase/docs/shortcodes/Rasterization/</guid><description>Taller 2 # Introduccion # Contexto # Resultados # p5-iframe markdown "</description></item><item><title/><link>https://visualcomputing.github.io/showcase/docs/shortcodes/Taller1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://visualcomputing.github.io/showcase/docs/shortcodes/Taller1/</guid><description>Taller 1 # Intoduction # An image kernel is a small matrix used to apply effects like the ones you might find in Photoshop or Gimp, such as blurring, sharpening, outlining or embossing. They&amp;rsquo;re also used in machine learning for &amp;lsquo;feature extraction&amp;rsquo;, a technique for determining the most important portions of an image. In this context the process is referred to more generally as &amp;ldquo;convolution&amp;rdquo;.
To see how they work, let&amp;rsquo;s start by inspecting a black and white image.</description></item><item><title/><link>https://visualcomputing.github.io/showcase/docs/shortcodes/WebCamTest/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://visualcomputing.github.io/showcase/docs/shortcodes/WebCamTest/</guid><description>Taller 2 # Introduccion # Contexto # Resultados # # #sketch-holder { padding: 0; margin: 0; text-align: center; } html, body { margin: 0; padding: 0; } canvas { display: block; } .handsfree-pointer { display: none !important } .handsfree-debugger {opacity: 0.25 !important}</description></item><item><title/><link>https://visualcomputing.github.io/showcase/docs/shortcodes/webgltest/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://visualcomputing.github.io/showcase/docs/shortcodes/webgltest/</guid><description>Resultados # p5-iframe markdown " Conclusiones y Trabajo Futuro #</description></item></channel></rss>