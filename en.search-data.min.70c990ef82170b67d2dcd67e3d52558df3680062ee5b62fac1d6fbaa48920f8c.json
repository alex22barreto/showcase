[{"id":0,"href":"/showcase/posts/creating-a-new-theme/","title":"Creating a New Theme","section":"Blog","content":" Introduction # This tutorial will show you how to create a simple theme in Hugo. I assume that you are familiar with HTML, the bash command line, and that you are comfortable using Markdown to format content. I\u0026rsquo;ll explain how Hugo uses templates and how you can organize your templates to create a theme. I won\u0026rsquo;t cover using CSS to style your theme.\nWe\u0026rsquo;ll start with creating a new site with a very basic template. Then we\u0026rsquo;ll add in a few pages and posts. With small variations on that, you will be able to create many different types of web sites.\nIn this tutorial, commands that you enter will start with the \u0026ldquo;$\u0026rdquo; prompt. The output will follow. Lines that start with \u0026ldquo;#\u0026rdquo; are comments that I\u0026rsquo;ve added to explain a point. When I show updates to a file, the \u0026ldquo;:wq\u0026rdquo; on the last line means to save the file.\nHere\u0026rsquo;s an example:\n## this is a comment $ echo this is a command this is a command ## edit the file $ vi foo.md +++ date = \u0026#34;2014-09-28\u0026#34; title = \u0026#34;creating a new theme\u0026#34; +++ bah and humbug :wq ## show it $ cat foo.md +++ date = \u0026#34;2014-09-28\u0026#34; title = \u0026#34;creating a new theme\u0026#34; +++ bah and humbug $ Some Definitions # There are a few concepts that you need to understand before creating a theme.\nSkins # Skins are the files responsible for the look and feel of your site. It’s the CSS that controls colors and fonts, it’s the Javascript that determines actions and reactions. It’s also the rules that Hugo uses to transform your content into the HTML that the site will serve to visitors.\nYou have two ways to create a skin. The simplest way is to create it in the layouts/ directory. If you do, then you don’t have to worry about configuring Hugo to recognize it. The first place that Hugo will look for rules and files is in the layouts/ directory so it will always find the skin.\nYour second choice is to create it in a sub-directory of the themes/ directory. If you do, then you must always tell Hugo where to search for the skin. It’s extra work, though, so why bother with it?\nThe difference between creating a skin in layouts/ and creating it in themes/ is very subtle. A skin in layouts/ can’t be customized without updating the templates and static files that it is built from. A skin created in themes/, on the other hand, can be and that makes it easier for other people to use it.\nThe rest of this tutorial will call a skin created in the themes/ directory a theme.\nNote that you can use this tutorial to create a skin in the layouts/ directory if you wish to. The main difference will be that you won’t need to update the site’s configuration file to use a theme.\nThe Home Page # The home page, or landing page, is the first page that many visitors to a site see. It is the index.html file in the root directory of the web site. Since Hugo writes files to the public/ directory, our home page is public/index.html.\nSite Configuration File # When Hugo runs, it looks for a configuration file that contains settings that override default values for the entire site. The file can use TOML, YAML, or JSON. I prefer to use TOML for my configuration files. If you prefer to use JSON or YAML, you’ll need to translate my examples. You’ll also need to change the name of the file since Hugo uses the extension to determine how to process it.\nHugo translates Markdown files into HTML. By default, Hugo expects to find Markdown files in your content/ directory and template files in your themes/ directory. It will create HTML files in your public/ directory. You can change this by specifying alternate locations in the configuration file.\nContent # Content is stored in text files that contain two sections. The first section is the “front matter,” which is the meta-information on the content. The second section contains Markdown that will be converted to HTML.\nFront Matter # The front matter is information about the content. Like the configuration file, it can be written in TOML, YAML, or JSON. Unlike the configuration file, Hugo doesn’t use the file’s extension to know the format. It looks for markers to signal the type. TOML is surrounded by “+++”, YAML by “---”, and JSON is enclosed in curly braces. I prefer to use TOML, so you’ll need to translate my examples if you prefer YAML or JSON.\nThe information in the front matter is passed into the template before the content is rendered into HTML.\nMarkdown # Content is written in Markdown which makes it easier to create the content. Hugo runs the content through a Markdown engine to create the HTML which will be written to the output file.\nTemplate Files # Hugo uses template files to render content into HTML. Template files are a bridge between the content and presentation. Rules in the template define what content is published, where it\u0026rsquo;s published to, and how it will rendered to the HTML file. The template guides the presentation by specifying the style to use.\nThere are three types of templates: single, list, and partial. Each type takes a bit of content as input and transforms it based on the commands in the template.\nHugo uses its knowledge of the content to find the template file used to render the content. If it can’t find a template that is an exact match for the content, it will shift up a level and search from there. It will continue to do so until it finds a matching template or runs out of templates to try. If it can’t find a template, it will use the default template for the site.\nPlease note that you can use the front matter to influence Hugo’s choice of templates.\nSingle Template # A single template is used to render a single piece of content. For example, an article or post would be a single piece of content and use a single template.\nList Template # A list template renders a group of related content. That could be a summary of recent postings or all articles in a category. List templates can contain multiple groups.\nThe homepage template is a special type of list template. Hugo assumes that the home page of your site will act as the portal for the rest of the content in the site.\nPartial Template # A partial template is a template that can be included in other templates. Partial templates must be called using the “partial” template command. They are very handy for rolling up common behavior. For example, your site may have a banner that all pages use. Instead of copying the text of the banner into every single and list template, you could create a partial with the banner in it. That way if you decide to change the banner, you only have to change the partial template.\nCreate a New Site # Let\u0026rsquo;s use Hugo to create a new web site. I\u0026rsquo;m a Mac user, so I\u0026rsquo;ll create mine in my home directory, in the Sites folder. If you\u0026rsquo;re using Linux, you might have to create the folder first.\nThe \u0026ldquo;new site\u0026rdquo; command will create a skeleton of a site. It will give you the basic directory structure and a useable configuration file.\n$ hugo new site ~/Sites/zafta $ cd ~/Sites/zafta $ ls -l total 8 drwxr-xr-x 7 quoha staff 238 Sep 29 16:49 . drwxr-xr-x 3 quoha staff 102 Sep 29 16:49 .. drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 archetypes -rw-r--r-- 1 quoha staff 82 Sep 29 16:49 config.toml drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 content drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 layouts drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 static $ Take a look in the content/ directory to confirm that it is empty.\nThe other directories (archetypes/, layouts/, and static/) are used when customizing a theme. That\u0026rsquo;s a topic for a different tutorial, so please ignore them for now.\nGenerate the HTML For the New Site # Running the hugo command with no options will read all the available content and generate the HTML files. It will also copy all static files (that\u0026rsquo;s everything that\u0026rsquo;s not content). Since we have an empty site, it won\u0026rsquo;t do much, but it will do it very quickly.\n$ hugo --verbose INFO: 2014/09/29 Using config file: config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ WARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html] WARN: 2014/09/29 Unable to locate layout: [404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 2 ms $ The \u0026ldquo;--verbose\u0026rdquo; flag gives extra information that will be helpful when we build the template. Every line of the output that starts with \u0026ldquo;INFO:\u0026rdquo; or \u0026ldquo;WARN:\u0026rdquo; is present because we used that flag. The lines that start with \u0026ldquo;WARN:\u0026rdquo; are warning messages. We\u0026rsquo;ll go over them later.\nWe can verify that the command worked by looking at the directory again.\n$ ls -l total 8 drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 archetypes -rw-r--r-- 1 quoha staff 82 Sep 29 16:49 config.toml drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 content drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 layouts drwxr-xr-x 4 quoha staff 136 Sep 29 17:02 public drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 static $ See that new public/ directory? Hugo placed all generated content there. When you\u0026rsquo;re ready to publish your web site, that\u0026rsquo;s the place to start. For now, though, let\u0026rsquo;s just confirm that we have what we\u0026rsquo;d expect from a site with no content.\n$ ls -l public total 16 -rw-r--r-- 1 quoha staff 416 Sep 29 17:02 index.xml -rw-r--r-- 1 quoha staff 262 Sep 29 17:02 sitemap.xml $ Hugo created two XML files, which is standard, but there are no HTML files.\nTest the New Site # Verify that you can run the built-in web server. It will dramatically shorten your development cycle if you do. Start it by running the \u0026ldquo;server\u0026rdquo; command. If it is successful, you will see output similar to the following:\n$ hugo server --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ WARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html] WARN: 2014/09/29 Unable to locate layout: [404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 2 ms Serving pages from /Users/quoha/Sites/zafta/public Web Server is available at http://localhost:1313 Press Ctrl+C to stop Connect to the listed URL (it\u0026rsquo;s on the line that starts with \u0026ldquo;Web Server\u0026rdquo;). If everything is working correctly, you should get a page that shows the following:\nindex.xml sitemap.xml That\u0026rsquo;s a listing of your public/ directory. Hugo didn\u0026rsquo;t create a home page because our site has no content. When there\u0026rsquo;s no index.html file in a directory, the server lists the files in the directory, which is what you should see in your browser.\nLet’s go back and look at those warnings again.\nWARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html] WARN: 2014/09/29 Unable to locate layout: [404.html] That second warning is easier to explain. We haven’t created a template to be used to generate “page not found errors.” The 404 message is a topic for a separate tutorial.\nNow for the first warning. It is for the home page. You can tell because the first layout that it looked for was “index.html.” That’s only used by the home page.\nI like that the verbose flag causes Hugo to list the files that it\u0026rsquo;s searching for. For the home page, they are index.html, _default/list.html, and _default/single.html. There are some rules that we\u0026rsquo;ll cover later that explain the names and paths. For now, just remember that Hugo couldn\u0026rsquo;t find a template for the home page and it told you so.\nAt this point, you\u0026rsquo;ve got a working installation and site that we can build upon. All that’s left is to add some content and a theme to display it.\nCreate a New Theme # Hugo doesn\u0026rsquo;t ship with a default theme. There are a few available (I counted a dozen when I first installed Hugo) and Hugo comes with a command to create new themes.\nWe\u0026rsquo;re going to create a new theme called \u0026ldquo;zafta.\u0026rdquo; Since the goal of this tutorial is to show you how to fill out the files to pull in your content, the theme will not contain any CSS. In other words, ugly but functional.\nAll themes have opinions on content and layout. For example, Zafta uses \u0026ldquo;post\u0026rdquo; over \u0026ldquo;blog\u0026rdquo;. Strong opinions make for simpler templates but differing opinions make it tougher to use themes. When you build a theme, consider using the terms that other themes do.\nCreate a Skeleton # Use the hugo \u0026ldquo;new\u0026rdquo; command to create the skeleton of a theme. This creates the directory structure and places empty files for you to fill out.\n$ hugo new theme zafta $ ls -l total 8 drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 archetypes -rw-r--r-- 1 quoha staff 82 Sep 29 16:49 config.toml drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 content drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 layouts drwxr-xr-x 4 quoha staff 136 Sep 29 17:02 public drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 static drwxr-xr-x 3 quoha staff 102 Sep 29 17:31 themes $ find themes -type f | xargs ls -l -rw-r--r-- 1 quoha staff 1081 Sep 29 17:31 themes/zafta/LICENSE.md -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/archetypes/default.md -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/list.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/single.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/partials/footer.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/partials/header.html -rw-r--r-- 1 quoha staff 93 Sep 29 17:31 themes/zafta/theme.toml $ The skeleton includes templates (the files ending in .html), license file, a description of your theme (the theme.toml file), and an empty archetype.\nPlease take a minute to fill out the theme.toml and LICENSE.md files. They\u0026rsquo;re optional, but if you\u0026rsquo;re going to be distributing your theme, it tells the world who to praise (or blame). It\u0026rsquo;s also nice to declare the license so that people will know how they can use the theme.\n$ vi themes/zafta/theme.toml author = \u0026#34;michael d henderson\u0026#34; description = \u0026#34;a minimal working template\u0026#34; license = \u0026#34;MIT\u0026#34; name = \u0026#34;zafta\u0026#34; source_repo = \u0026#34;\u0026#34; tags = [\u0026#34;tags\u0026#34;, \u0026#34;categories\u0026#34;] :wq ## also edit themes/zafta/LICENSE.md and change ## the bit that says \u0026#34;YOUR_NAME_HERE\u0026#34; Note that the the skeleton\u0026rsquo;s template files are empty. Don\u0026rsquo;t worry, we\u0026rsquo;ll be changing that shortly.\n$ find themes/zafta -name \u0026#39;*.html\u0026#39; | xargs ls -l -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/list.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/single.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/partials/footer.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/partials/header.html $ Update the Configuration File to Use the Theme # Now that we\u0026rsquo;ve got a theme to work with, it\u0026rsquo;s a good idea to add the theme name to the configuration file. This is optional, because you can always add \u0026ldquo;-t zafta\u0026rdquo; on all your commands. I like to put it the configuration file because I like shorter command lines. If you don\u0026rsquo;t put it in the configuration file or specify it on the command line, you won\u0026rsquo;t use the template that you\u0026rsquo;re expecting to.\nEdit the file to add the theme, add a title for the site, and specify that all of our content will use the TOML format.\n$ vi config.toml theme = \u0026#34;zafta\u0026#34; baseurl = \u0026#34;\u0026#34; languageCode = \u0026#34;en-us\u0026#34; title = \u0026#34;zafta - totally refreshing\u0026#34; MetaDataFormat = \u0026#34;toml\u0026#34; :wq $ Generate the Site # Now that we have an empty theme, let\u0026rsquo;s generate the site again.\n$ hugo --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 2 ms $ Did you notice that the output is different? The warning message for the home page has disappeared and we have an additional information line saying that Hugo is syncing from the theme\u0026rsquo;s directory.\nLet\u0026rsquo;s check the public/ directory to see what Hugo\u0026rsquo;s created.\n$ ls -l public total 16 drwxr-xr-x 2 quoha staff 68 Sep 29 17:56 css -rw-r--r-- 1 quoha staff 0 Sep 29 17:56 index.html -rw-r--r-- 1 quoha staff 407 Sep 29 17:56 index.xml drwxr-xr-x 2 quoha staff 68 Sep 29 17:56 js -rw-r--r-- 1 quoha staff 243 Sep 29 17:56 sitemap.xml $ Notice four things:\nHugo created a home page. This is the file public/index.html. Hugo created a css/ directory. Hugo created a js/ directory. Hugo claimed that it created 0 pages. It created a file and copied over static files, but didn\u0026rsquo;t create any pages. That\u0026rsquo;s because it considers a \u0026ldquo;page\u0026rdquo; to be a file created directly from a content file. It doesn\u0026rsquo;t count things like the index.html files that it creates automatically. The Home Page # Hugo supports many different types of templates. The home page is special because it gets its own type of template and its own template file. The file, layouts/index.html, is used to generate the HTML for the home page. The Hugo documentation says that this is the only required template, but that depends. Hugo\u0026rsquo;s warning message shows that it looks for three different templates:\nWARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html] If it can\u0026rsquo;t find any of these, it completely skips creating the home page. We noticed that when we built the site without having a theme installed.\nWhen Hugo created our theme, it created an empty home page template. Now, when we build the site, Hugo finds the template and uses it to generate the HTML for the home page. Since the template file is empty, the HTML file is empty, too. If the template had any rules in it, then Hugo would have used them to generate the home page.\n$ find . -name index.html | xargs ls -l -rw-r--r-- 1 quoha staff 0 Sep 29 20:21 ./public/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 ./themes/zafta/layouts/index.html $ The Magic of Static # Hugo does two things when generating the site. It uses templates to transform content into HTML and it copies static files into the site. Unlike content, static files are not transformed. They are copied exactly as they are.\nHugo assumes that your site will use both CSS and JavaScript, so it creates directories in your theme to hold them. Remember opinions? Well, Hugo\u0026rsquo;s opinion is that you\u0026rsquo;ll store your CSS in a directory named css/ and your JavaScript in a directory named js/. If you don\u0026rsquo;t like that, you can change the directory names in your theme directory or even delete them completely. Hugo\u0026rsquo;s nice enough to offer its opinion, then behave nicely if you disagree.\n$ find themes/zafta -type d | xargs ls -ld drwxr-xr-x 7 quoha staff 238 Sep 29 17:38 themes/zafta drwxr-xr-x 3 quoha staff 102 Sep 29 17:31 themes/zafta/archetypes drwxr-xr-x 5 quoha staff 170 Sep 29 17:31 themes/zafta/layouts drwxr-xr-x 4 quoha staff 136 Sep 29 17:31 themes/zafta/layouts/_default drwxr-xr-x 4 quoha staff 136 Sep 29 17:31 themes/zafta/layouts/partials drwxr-xr-x 4 quoha staff 136 Sep 29 17:31 themes/zafta/static drwxr-xr-x 2 quoha staff 68 Sep 29 17:31 themes/zafta/static/css drwxr-xr-x 2 quoha staff 68 Sep 29 17:31 themes/zafta/static/js $ The Theme Development Cycle # When you\u0026rsquo;re working on a theme, you will make changes in the theme\u0026rsquo;s directory, rebuild the site, and check your changes in the browser. Hugo makes this very easy:\nPurge the public/ directory. Run the built in web server in watch mode. Open your site in a browser. Update the theme. Glance at your browser window to see changes. Return to step 4. I’ll throw in one more opinion: never work on a theme on a live site. Always work on a copy of your site. Make changes to your theme, test them, then copy them up to your site. For added safety, use a tool like Git to keep a revision history of your content and your theme. Believe me when I say that it is too easy to lose both your mind and your changes.\nCheck the main Hugo site for information on using Git with Hugo.\nPurge the public/ Directory # When generating the site, Hugo will create new files and update existing ones in the public/ directory. It will not delete files that are no longer used. For example, files that were created in the wrong directory or with the wrong title will remain. If you leave them, you might get confused by them later. I recommend cleaning out your site prior to generating it.\nNote: If you\u0026rsquo;re building on an SSD, you should ignore this. Churning on a SSD can be costly.\nHugo\u0026rsquo;s Watch Option # Hugo\u0026rsquo;s \u0026ldquo;--watch\u0026rdquo; option will monitor the content/ and your theme directories for changes and rebuild the site automatically.\nLive Reload # Hugo\u0026rsquo;s built in web server supports live reload. As pages are saved on the server, the browser is told to refresh the page. Usually, this happens faster than you can say, \u0026ldquo;Wow, that\u0026rsquo;s totally amazing.\u0026rdquo;\nDevelopment Commands # Use the following commands as the basis for your workflow.\n## purge old files. hugo will recreate the public directory. ## $ rm -rf public ## ## run hugo in watch mode ## $ hugo server --watch --verbose Here\u0026rsquo;s sample output showing Hugo detecting a change to the template for the home page. Once generated, the web browser automatically reloaded the page. I\u0026rsquo;ve said this before, it\u0026rsquo;s amazing.\n$ rm -rf public $ hugo server --watch --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 2 ms Watching for changes in /Users/quoha/Sites/zafta/content Serving pages from /Users/quoha/Sites/zafta/public Web Server is available at http://localhost:1313 Press Ctrl+C to stop INFO: 2014/09/29 File System Event: [\u0026#34;/Users/quoha/Sites/zafta/themes/zafta/layouts/index.html\u0026#34;: MODIFY|ATTRIB] Change detected, rebuilding site WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 1 ms Update the Home Page Template # The home page is one of a few special pages that Hugo creates automatically. As mentioned earlier, it looks for one of three files in the theme\u0026rsquo;s layout/ directory:\nindex.html _default/list.html _default/single.html We could update one of the default templates, but a good design decision is to update the most specific template available. That\u0026rsquo;s not a hard and fast rule (in fact, we\u0026rsquo;ll break it a few times in this tutorial), but it is a good generalization.\nMake a Static Home Page # Right now, that page is empty because we don\u0026rsquo;t have any content and we don\u0026rsquo;t have any logic in the template. Let\u0026rsquo;s change that by adding some text to the template.\n$ vi themes/zafta/layouts/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;hugo says hello!\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; :wq $ Build the web site and then verify the results.\n$ hugo --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 2 ms $ find public -type f -name \u0026#39;*.html\u0026#39; | xargs ls -l -rw-r--r-- 1 quoha staff 78 Sep 29 21:26 public/index.html $ cat public/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;hugo says hello!\u0026lt;/p\u0026gt; \u0026lt;/html\u0026gt; Live Reload # Note: If you\u0026rsquo;re running the server with the --watch option, you\u0026rsquo;ll see different content in the file:\n$ cat public/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;hugo says hello!\u0026lt;/p\u0026gt; \u0026lt;script\u0026gt;document.write(\u0026#39;\u0026lt;script src=\u0026#34;http://\u0026#39; + (location.host || \u0026#39;localhost\u0026#39;).split(\u0026#39;:\u0026#39;)[0] + \u0026#39;:1313/livereload.js?mindelay=10\u0026#34;\u0026gt;\u0026lt;/\u0026#39; + \u0026#39;script\u0026gt;\u0026#39;)\u0026lt;/script\u0026gt;\u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; When you use --watch, the Live Reload script is added by Hugo. Look for live reload in the documentation to see what it does and how to disable it.\nBuild a \u0026ldquo;Dynamic\u0026rdquo; Home Page # \u0026ldquo;Dynamic home page?\u0026rdquo; Hugo\u0026rsquo;s a static web site generator, so this seems an odd thing to say. I mean let\u0026rsquo;s have the home page automatically reflect the content in the site every time Hugo builds it. We\u0026rsquo;ll use iteration in the template to do that.\nCreate New Posts # Now that we have the home page generating static content, let\u0026rsquo;s add some content to the site. We\u0026rsquo;ll display these posts as a list on the home page and on their own page, too.\nHugo has a command to generate a skeleton post, just like it does for sites and themes.\n$ hugo --verbose new post/first.md INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 attempting to create post/first.md of post INFO: 2014/09/29 curpath: /Users/quoha/Sites/zafta/themes/zafta/archetypes/default.md ERROR: 2014/09/29 Unable to Cast \u0026lt;nil\u0026gt; to map[string]interface{} $ That wasn\u0026rsquo;t very nice, was it?\nThe \u0026ldquo;new\u0026rdquo; command uses an archetype to create the post file. Hugo created an empty default archetype file, but that causes an error when there\u0026rsquo;s a theme. For me, the workaround was to create an archetypes file specifically for the post type.\n$ vi themes/zafta/archetypes/post.md +++ Description = \u0026#34;\u0026#34; Tags = [] Categories = [] +++ :wq $ find themes/zafta/archetypes -type f | xargs ls -l -rw-r--r-- 1 quoha staff 0 Sep 29 21:53 themes/zafta/archetypes/default.md -rw-r--r-- 1 quoha staff 51 Sep 29 21:54 themes/zafta/archetypes/post.md $ hugo --verbose new post/first.md INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 attempting to create post/first.md of post INFO: 2014/09/29 curpath: /Users/quoha/Sites/zafta/themes/zafta/archetypes/post.md INFO: 2014/09/29 creating /Users/quoha/Sites/zafta/content/post/first.md /Users/quoha/Sites/zafta/content/post/first.md created $ hugo --verbose new post/second.md INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 attempting to create post/second.md of post INFO: 2014/09/29 curpath: /Users/quoha/Sites/zafta/themes/zafta/archetypes/post.md INFO: 2014/09/29 creating /Users/quoha/Sites/zafta/content/post/second.md /Users/quoha/Sites/zafta/content/post/second.md created $ ls -l content/post total 16 -rw-r--r-- 1 quoha staff 104 Sep 29 21:54 first.md -rw-r--r-- 1 quoha staff 105 Sep 29 21:57 second.md $ cat content/post/first.md +++ Categories = [] Description = \u0026#34;\u0026#34; Tags = [] date = \u0026#34;2014-09-29T21:54:53-05:00\u0026#34; title = \u0026#34;first\u0026#34; +++ my first post $ cat content/post/second.md +++ Categories = [] Description = \u0026#34;\u0026#34; Tags = [] date = \u0026#34;2014-09-29T21:57:09-05:00\u0026#34; title = \u0026#34;second\u0026#34; +++ my second post $ Build the web site and then verify the results.\n$ rm -rf public $ hugo --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 found taxonomies: map[string]string{\u0026#34;category\u0026#34;:\u0026#34;categories\u0026#34;, \u0026#34;tag\u0026#34;:\u0026#34;tags\u0026#34;} WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 2 pages created 0 tags created 0 categories created in 4 ms $ The output says that it created 2 pages. Those are our new posts:\n$ find public -type f -name \u0026#39;*.html\u0026#39; | xargs ls -l -rw-r--r-- 1 quoha staff 78 Sep 29 22:13 public/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:13 public/post/first/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:13 public/post/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:13 public/post/second/index.html $ The new files are empty because because the templates used to generate the content are empty. The homepage doesn\u0026rsquo;t show the new content, either. We have to update the templates to add the posts.\nList and Single Templates # In Hugo, we have three major kinds of templates. There\u0026rsquo;s the home page template that we updated previously. It is used only by the home page. We also have \u0026ldquo;single\u0026rdquo; templates which are used to generate output for a single content file. We also have \u0026ldquo;list\u0026rdquo; templates that are used to group multiple pieces of content before generating output.\nGenerally speaking, list templates are named \u0026ldquo;list.html\u0026rdquo; and single templates are named \u0026ldquo;single.html.\u0026rdquo;\nThere are three other types of templates: partials, content views, and terms. We will not go into much detail on these.\nAdd Content to the Homepage # The home page will contain a list of posts. Let\u0026rsquo;s update its template to add the posts that we just created. The logic in the template will run every time we build the site.\n$ vi themes/zafta/layouts/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; {{ range first 10 .Data.Pages }} \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; {{ end }} \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; :wq $ Hugo uses the Go template engine. That engine scans the template files for commands which are enclosed between \u0026ldquo;{{\u0026rdquo; and \u0026ldquo;}}\u0026rdquo;. In our template, the commands are:\nrange .Title end The \u0026ldquo;range\u0026rdquo; command is an iterator. We\u0026rsquo;re going to use it to go through the first ten pages. Every HTML file that Hugo creates is treated as a page, so looping through the list of pages will look at every file that will be created.\nThe \u0026ldquo;.Title\u0026rdquo; command prints the value of the \u0026ldquo;title\u0026rdquo; variable. Hugo pulls it from the front matter in the Markdown file.\nThe \u0026ldquo;end\u0026rdquo; command signals the end of the range iterator. The engine loops back to the top of the iteration when it finds \u0026ldquo;end.\u0026rdquo; Everything between the \u0026ldquo;range\u0026rdquo; and \u0026ldquo;end\u0026rdquo; is evaluated every time the engine goes through the iteration. In this file, that would cause the title from the first ten pages to be output as heading level one.\nIt\u0026rsquo;s helpful to remember that some variables, like .Data, are created before any output files. Hugo loads every content file into the variable and then gives the template a chance to process before creating the HTML files.\nBuild the web site and then verify the results.\n$ rm -rf public $ hugo --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 found taxonomies: map[string]string{\u0026#34;tag\u0026#34;:\u0026#34;tags\u0026#34;, \u0026#34;category\u0026#34;:\u0026#34;categories\u0026#34;} WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 2 pages created 0 tags created 0 categories created in 4 ms $ find public -type f -name \u0026#39;*.html\u0026#39; | xargs ls -l -rw-r--r-- 1 quoha staff 94 Sep 29 22:23 public/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:23 public/post/first/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:23 public/post/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:23 public/post/second/index.html $ cat public/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;second\u0026lt;/h1\u0026gt; \u0026lt;h1\u0026gt;first\u0026lt;/h1\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; $ Congratulations, the home page shows the title of the two posts. The posts themselves are still empty, but let\u0026rsquo;s take a moment to appreciate what we\u0026rsquo;ve done. Your template now generates output dynamically. Believe it or not, by inserting the range command inside of those curly braces, you\u0026rsquo;ve learned everything you need to know to build a theme. All that\u0026rsquo;s really left is understanding which template will be used to generate each content file and becoming familiar with the commands for the template engine.\nAnd, if that were entirely true, this tutorial would be much shorter. There are a few things to know that will make creating a new template much easier. Don\u0026rsquo;t worry, though, that\u0026rsquo;s all to come.\nAdd Content to the Posts # We\u0026rsquo;re working with posts, which are in the content/post/ directory. That means that their section is \u0026ldquo;post\u0026rdquo; (and if we don\u0026rsquo;t do something weird, their type is also \u0026ldquo;post\u0026rdquo;).\nHugo uses the section and type to find the template file for every piece of content. Hugo will first look for a template file that matches the section or type name. If it can\u0026rsquo;t find one, then it will look in the _default/ directory. There are some twists that we\u0026rsquo;ll cover when we get to categories and tags, but for now we can assume that Hugo will try post/single.html, then _default/single.html.\nNow that we know the search rule, let\u0026rsquo;s see what we actually have available:\n$ find themes/zafta -name single.html | xargs ls -l -rw-r--r-- 1 quoha staff 132 Sep 29 17:31 themes/zafta/layouts/_default/single.html We could create a new template, post/single.html, or change the default. Since we don\u0026rsquo;t know of any other content types, let\u0026rsquo;s start with updating the default.\nRemember, any content that we haven\u0026rsquo;t created a template for will end up using this template. That can be good or bad. Bad because I know that we\u0026rsquo;re going to be adding different types of content and we\u0026rsquo;re going to end up undoing some of the changes we\u0026rsquo;ve made. It\u0026rsquo;s good because we\u0026rsquo;ll be able to see immediate results. It\u0026rsquo;s also good to start here because we can start to build the basic layout for the site. As we add more content types, we\u0026rsquo;ll refactor this file and move logic around. Hugo makes that fairly painless, so we\u0026rsquo;ll accept the cost and proceed.\nPlease see the Hugo documentation on template rendering for all the details on determining which template to use. And, as the docs mention, if you\u0026rsquo;re building a single page application (SPA) web site, you can delete all of the other templates and work with just the default single page. That\u0026rsquo;s a refreshing amount of joy right there.\nUpdate the Template File # $ vi themes/zafta/layouts/_default/single.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;{{ .Title }}\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; {{ .Content }} \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; :wq $ Build the web site and verify the results.\n$ rm -rf public $ hugo --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 found taxonomies: map[string]string{\u0026#34;tag\u0026#34;:\u0026#34;tags\u0026#34;, \u0026#34;category\u0026#34;:\u0026#34;categories\u0026#34;} WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 2 pages created 0 tags created 0 categories created in 4 ms $ find public -type f -name \u0026#39;*.html\u0026#39; | xargs ls -l -rw-r--r-- 1 quoha staff 94 Sep 29 22:40 public/index.html -rw-r--r-- 1 quoha staff 125 Sep 29 22:40 public/post/first/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:40 public/post/index.html -rw-r--r-- 1 quoha staff 128 Sep 29 22:40 public/post/second/index.html $ cat public/post/first/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;first\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;first\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;my first post\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; $ cat public/post/second/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;second\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;second\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;my second post\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; $ Notice that the posts now have content. You can go to localhost:1313/post/first to verify.\nLinking to Content # The posts are on the home page. Let\u0026rsquo;s add a link from there to the post. Since this is the home page, we\u0026rsquo;ll update its template.\n$ vi themes/zafta/layouts/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; {{ range first 10 .Data.Pages }} \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026#34;{{ .Permalink }}\u0026#34;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; {{ end }} \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Build the web site and verify the results.\n$ rm -rf public $ hugo --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 found taxonomies: map[string]string{\u0026#34;tag\u0026#34;:\u0026#34;tags\u0026#34;, \u0026#34;category\u0026#34;:\u0026#34;categories\u0026#34;} WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 2 pages created 0 tags created 0 categories created in 4 ms $ find public -type f -name \u0026#39;*.html\u0026#39; | xargs ls -l -rw-r--r-- 1 quoha staff 149 Sep 29 22:44 public/index.html -rw-r--r-- 1 quoha staff 125 Sep 29 22:44 public/post/first/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:44 public/post/index.html -rw-r--r-- 1 quoha staff 128 Sep 29 22:44 public/post/second/index.html $ cat public/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026#34;/post/second/\u0026#34;\u0026gt;second\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026#34;/post/first/\u0026#34;\u0026gt;first\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; $ Create a Post Listing # We have the posts displaying on the home page and on their own page. We also have a file public/post/index.html that is empty. Let\u0026rsquo;s make it show a list of all posts (not just the first ten).\nWe need to decide which template to update. This will be a listing, so it should be a list template. Let\u0026rsquo;s take a quick look and see which list templates are available.\n$ find themes/zafta -name list.html | xargs ls -l -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/list.html As with the single post, we have to decide to update _default/list.html or create post/list.html. We still don\u0026rsquo;t have multiple content types, so let\u0026rsquo;s stay consistent and update the default list template.\nCreating Top Level Pages # Let\u0026rsquo;s add an \u0026ldquo;about\u0026rdquo; page and display it at the top level (as opposed to a sub-level like we did with posts).\nThe default in Hugo is to use the directory structure of the content/ directory to guide the location of the generated html in the public/ directory. Let\u0026rsquo;s verify that by creating an \u0026ldquo;about\u0026rdquo; page at the top level:\n$ vi content/about.md +++ title = \u0026#34;about\u0026#34; description = \u0026#34;about this site\u0026#34; date = \u0026#34;2014-09-27\u0026#34; slug = \u0026#34;about time\u0026#34; +++ ## about us i\u0026#39;m speechless :wq Generate the web site and verify the results.\n$ find public -name \u0026#39;*.html\u0026#39; | xargs ls -l -rw-rw-r-- 1 mdhender staff 334 Sep 27 15:08 public/about-time/index.html -rw-rw-r-- 1 mdhender staff 527 Sep 27 15:08 public/index.html -rw-rw-r-- 1 mdhender staff 358 Sep 27 15:08 public/post/first-post/index.html -rw-rw-r-- 1 mdhender staff 0 Sep 27 15:08 public/post/index.html -rw-rw-r-- 1 mdhender staff 342 Sep 27 15:08 public/post/second-post/index.html Notice that the page wasn\u0026rsquo;t created at the top level. It was created in a sub-directory named \u0026lsquo;about-time/\u0026rsquo;. That name came from our slug. Hugo will use the slug to name the generated content. It\u0026rsquo;s a reasonable default, by the way, but we can learn a few things by fighting it for this file.\nOne other thing. Take a look at the home page.\n$ cat public/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026#34;http://localhost:1313/post/theme/\u0026#34;\u0026gt;creating a new theme\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026#34;http://localhost:1313/about-time/\u0026#34;\u0026gt;about\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026#34;http://localhost:1313/post/second-post/\u0026#34;\u0026gt;second\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026#34;http://localhost:1313/post/first-post/\u0026#34;\u0026gt;first\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;script\u0026gt;document.write(\u0026#39;\u0026lt;script src=\u0026#34;http://\u0026#39; + (location.host || \u0026#39;localhost\u0026#39;).split(\u0026#39;:\u0026#39;)[0] + \u0026#39;:1313/livereload.js?mindelay=10\u0026#34;\u0026gt;\u0026lt;/\u0026#39; + \u0026#39;script\u0026gt;\u0026#39;)\u0026lt;/script\u0026gt;\u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Notice that the \u0026ldquo;about\u0026rdquo; link is listed with the posts? That\u0026rsquo;s not desirable, so let\u0026rsquo;s change that first.\n$ vi themes/zafta/layouts/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;posts\u0026lt;/h1\u0026gt; {{ range first 10 .Data.Pages }} {{ if eq .Type \u0026#34;post\u0026#34;}} \u0026lt;h2\u0026gt;\u0026lt;a href=\u0026#34;{{ .Permalink }}\u0026#34;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt;\u0026lt;/h2\u0026gt; {{ end }} {{ end }} \u0026lt;h1\u0026gt;pages\u0026lt;/h1\u0026gt; {{ range .Data.Pages }} {{ if eq .Type \u0026#34;page\u0026#34; }} \u0026lt;h2\u0026gt;\u0026lt;a href=\u0026#34;{{ .Permalink }}\u0026#34;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt;\u0026lt;/h2\u0026gt; {{ end }} {{ end }} \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; :wq Generate the web site and verify the results. The home page has two sections, posts and pages, and each section has the right set of headings and links in it.\nBut, that about page still renders to about-time/index.html.\n$ find public -name \u0026#39;*.html\u0026#39; | xargs ls -l -rw-rw-r-- 1 mdhender staff 334 Sep 27 15:33 public/about-time/index.html -rw-rw-r-- 1 mdhender staff 645 Sep 27 15:33 public/index.html -rw-rw-r-- 1 mdhender staff 358 Sep 27 15:33 public/post/first-post/index.html -rw-rw-r-- 1 mdhender staff 0 Sep 27 15:33 public/post/index.html -rw-rw-r-- 1 mdhender staff 342 Sep 27 15:33 public/post/second-post/index.html Knowing that hugo is using the slug to generate the file name, the simplest solution is to change the slug. Let\u0026rsquo;s do it the hard way and change the permalink in the configuration file.\n$ vi config.toml [permalinks] page = \u0026#34;/:title/\u0026#34; about = \u0026#34;/:filename/\u0026#34; Generate the web site and verify that this didn\u0026rsquo;t work. Hugo lets \u0026ldquo;slug\u0026rdquo; or \u0026ldquo;URL\u0026rdquo; override the permalinks setting in the configuration file. Go ahead and comment out the slug in content/about.md, then generate the web site to get it to be created in the right place.\nSharing Templates # If you\u0026rsquo;ve been following along, you probably noticed that posts have titles in the browser and the home page doesn\u0026rsquo;t. That\u0026rsquo;s because we didn\u0026rsquo;t put the title in the home page\u0026rsquo;s template (layouts/index.html). That\u0026rsquo;s an easy thing to do, but let\u0026rsquo;s look at a different option.\nWe can put the common bits into a shared template that\u0026rsquo;s stored in the themes/zafta/layouts/partials/ directory.\nCreate the Header and Footer Partials # In Hugo, a partial is a sugar-coated template. Normally a template reference has a path specified. Partials are different. Hugo searches for them along a TODO defined search path. This makes it easier for end-users to override the theme\u0026rsquo;s presentation.\n$ vi themes/zafta/layouts/partials/header.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;{{ .Title }}\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; :wq $ vi themes/zafta/layouts/partials/footer.html \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; :wq Update the Home Page Template to Use the Partials # The most noticeable difference between a template call and a partials call is the lack of path:\n{{ template \u0026#34;theme/partials/header.html\u0026#34; . }} versus\n{{ partial \u0026#34;header.html\u0026#34; . }} Both pass in the context.\nLet\u0026rsquo;s change the home page template to use these new partials.\n$ vi themes/zafta/layouts/index.html {{ partial \u0026#34;header.html\u0026#34; . }} \u0026lt;h1\u0026gt;posts\u0026lt;/h1\u0026gt; {{ range first 10 .Data.Pages }} {{ if eq .Type \u0026#34;post\u0026#34;}} \u0026lt;h2\u0026gt;\u0026lt;a href=\u0026#34;{{ .Permalink }}\u0026#34;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt;\u0026lt;/h2\u0026gt; {{ end }} {{ end }} \u0026lt;h1\u0026gt;pages\u0026lt;/h1\u0026gt; {{ range .Data.Pages }} {{ if or (eq .Type \u0026#34;page\u0026#34;) (eq .Type \u0026#34;about\u0026#34;) }} \u0026lt;h2\u0026gt;\u0026lt;a href=\u0026#34;{{ .Permalink }}\u0026#34;\u0026gt;{{ .Type }} - {{ .Title }} - {{ .RelPermalink }}\u0026lt;/a\u0026gt;\u0026lt;/h2\u0026gt; {{ end }} {{ end }} {{ partial \u0026#34;footer.html\u0026#34; . }} :wq Generate the web site and verify the results. The title on the home page is now \u0026ldquo;your title here\u0026rdquo;, which comes from the \u0026ldquo;title\u0026rdquo; variable in the config.toml file.\nUpdate the Default Single Template to Use the Partials # $ vi themes/zafta/layouts/_default/single.html {{ partial \u0026#34;header.html\u0026#34; . }} \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; {{ .Content }} {{ partial \u0026#34;footer.html\u0026#34; . }} :wq Generate the web site and verify the results. The title on the posts and the about page should both reflect the value in the markdown file.\nAdd “Date Published” to Posts # It\u0026rsquo;s common to have posts display the date that they were written or published, so let\u0026rsquo;s add that. The front matter of our posts has a variable named \u0026ldquo;date.\u0026rdquo; It\u0026rsquo;s usually the date the content was created, but let\u0026rsquo;s pretend that\u0026rsquo;s the value we want to display.\nAdd “Date Published” to the Template # We\u0026rsquo;ll start by updating the template used to render the posts. The template code will look like:\n{{ .Date.Format \u0026#34;Mon, Jan 2, 2006\u0026#34; }} Posts use the default single template, so we\u0026rsquo;ll change that file.\n$ vi themes/zafta/layouts/_default/single.html {{ partial \u0026#34;header.html\u0026#34; . }} \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; \u0026lt;h2\u0026gt;{{ .Date.Format \u0026#34;Mon, Jan 2, 2006\u0026#34; }}\u0026lt;/h2\u0026gt; {{ .Content }} {{ partial \u0026#34;footer.html\u0026#34; . }} :wq Generate the web site and verify the results. The posts now have the date displayed in them. There\u0026rsquo;s a problem, though. The \u0026ldquo;about\u0026rdquo; page also has the date displayed.\nAs usual, there are a couple of ways to make the date display only on posts. We could do an \u0026ldquo;if\u0026rdquo; statement like we did on the home page. Another way would be to create a separate template for posts.\nThe \u0026ldquo;if\u0026rdquo; solution works for sites that have just a couple of content types. It aligns with the principle of \u0026ldquo;code for today,\u0026rdquo; too.\nLet\u0026rsquo;s assume, though, that we\u0026rsquo;ve made our site so complex that we feel we have to create a new template type. In Hugo-speak, we\u0026rsquo;re going to create a section template.\nLet\u0026rsquo;s restore the default single template before we forget.\n$ mkdir themes/zafta/layouts/post $ vi themes/zafta/layouts/_default/single.html {{ partial \u0026#34;header.html\u0026#34; . }} \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; {{ .Content }} {{ partial \u0026#34;footer.html\u0026#34; . }} :wq Now we\u0026rsquo;ll update the post\u0026rsquo;s version of the single template. If you remember Hugo\u0026rsquo;s rules, the template engine will use this version over the default.\n$ vi themes/zafta/layouts/post/single.html {{ partial \u0026#34;header.html\u0026#34; . }} \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; \u0026lt;h2\u0026gt;{{ .Date.Format \u0026#34;Mon, Jan 2, 2006\u0026#34; }}\u0026lt;/h2\u0026gt; {{ .Content }} {{ partial \u0026#34;footer.html\u0026#34; . }} :wq Note that we removed the date logic from the default template and put it in the post template. Generate the web site and verify the results. Posts have dates and the about page doesn\u0026rsquo;t.\nDon\u0026rsquo;t Repeat Yourself # DRY is a good design goal and Hugo does a great job supporting it. Part of the art of a good template is knowing when to add a new template and when to update an existing one. While you\u0026rsquo;re figuring that out, accept that you\u0026rsquo;ll be doing some refactoring. Hugo makes that easy and fast, so it\u0026rsquo;s okay to delay splitting up a template.\n"},{"id":1,"href":"/showcase/posts/migrate-from-jekyll/","title":"Migrate to Hugo from Jekyll","section":"Blog","content":" Move static content to static # Jekyll has a rule that any directory not starting with _ will be copied as-is to the _site output. Hugo keeps all static content under static. You should therefore move it all there. With Jekyll, something that looked like\n▾ \u0026lt;root\u0026gt;/ ▾ images/ logo.png should become\n▾ \u0026lt;root\u0026gt;/ ▾ static/ ▾ images/ logo.png Additionally, you\u0026rsquo;ll want any files that should reside at the root (such as CNAME) to be moved to static.\nCreate your Hugo configuration file # Hugo can read your configuration as JSON, YAML or TOML. Hugo supports parameters custom configuration too. Refer to the Hugo configuration documentation for details.\nSet your configuration publish folder to _site # The default is for Jekyll to publish to _site and for Hugo to publish to public. If, like me, you have _site mapped to a git submodule on the gh-pages branch, you\u0026rsquo;ll want to do one of two alternatives:\nChange your submodule to point to map gh-pages to public instead of _site (recommended).\ngit submodule deinit _site git rm _site git submodule add -b gh-pages git@github.com:your-username/your-repo.git public Or, change the Hugo configuration to use _site instead of public.\n{ .. \u0026quot;publishdir\u0026quot;: \u0026quot;_site\u0026quot;, .. } Convert Jekyll templates to Hugo templates # That\u0026rsquo;s the bulk of the work right here. The documentation is your friend. You should refer to Jekyll\u0026rsquo;s template documentation if you need to refresh your memory on how you built your blog and Hugo\u0026rsquo;s template to learn Hugo\u0026rsquo;s way.\nAs a single reference data point, converting my templates for heyitsalex.net took me no more than a few hours.\nConvert Jekyll plugins to Hugo shortcodes # Jekyll has plugins; Hugo has shortcodes. It\u0026rsquo;s fairly trivial to do a port.\nImplementation # As an example, I was using a custom image_tag plugin to generate figures with caption when running Jekyll. As I read about shortcodes, I found Hugo had a nice built-in shortcode that does exactly the same thing.\nJekyll\u0026rsquo;s plugin:\nmodule Jekyll class ImageTag \u0026lt; Liquid::Tag @url = nil @caption = nil @class = nil @link = nil // Patterns IMAGE_URL_WITH_CLASS_AND_CAPTION = IMAGE_URL_WITH_CLASS_AND_CAPTION_AND_LINK = /(\\w+)(\\s+)((https?:\\/\\/|\\/)(\\S+))(\\s+)\u0026quot;(.*?)\u0026quot;(\\s+)-\u0026gt;((https?:\\/\\/|\\/)(\\S+))(\\s*)/i IMAGE_URL_WITH_CAPTION = /((https?:\\/\\/|\\/)(\\S+))(\\s+)\u0026quot;(.*?)\u0026quot;/i IMAGE_URL_WITH_CLASS = /(\\w+)(\\s+)((https?:\\/\\/|\\/)(\\S+))/i IMAGE_URL = /((https?:\\/\\/|\\/)(\\S+))/i def initialize(tag_name, markup, tokens) super if markup =~ IMAGE_URL_WITH_CLASS_AND_CAPTION_AND_LINK @class = $1 @url = $3 @caption = $7 @link = $9 elsif markup =~ IMAGE_URL_WITH_CLASS_AND_CAPTION @class = $1 @url = $3 @caption = $7 elsif markup =~ IMAGE_URL_WITH_CAPTION @url = $1 @caption = $5 elsif markup =~ IMAGE_URL_WITH_CLASS @class = $1 @url = $3 elsif markup =~ IMAGE_URL @url = $1 end end def render(context) if @class source = \u0026quot;\u0026lt;figure class='#{@class}'\u0026gt;\u0026quot; else source = \u0026quot;\u0026lt;figure\u0026gt;\u0026quot; end if @link source += \u0026quot;\u0026lt;a href=\\\u0026quot;#{@link}\\\u0026quot;\u0026gt;\u0026quot; end source += \u0026quot;\u0026lt;img src=\\\u0026quot;#{@url}\\\u0026quot;\u0026gt;\u0026quot; if @link source += \u0026quot;\u0026lt;/a\u0026gt;\u0026quot; end source += \u0026quot;\u0026lt;figcaption\u0026gt;#{@caption}\u0026lt;/figcaption\u0026gt;\u0026quot; if @caption source += \u0026quot;\u0026lt;/figure\u0026gt;\u0026quot; source end end end Liquid::Template.register_tag('image', Jekyll::ImageTag) is written as this Hugo shortcode:\n\u0026lt;!-- image --\u0026gt; \u0026lt;figure {{ with .Get \u0026quot;class\u0026quot; }}class=\u0026quot;{{.}}\u0026quot;{{ end }}\u0026gt; {{ with .Get \u0026quot;link\u0026quot;}}\u0026lt;a href=\u0026quot;{{.}}\u0026quot;\u0026gt;{{ end }} \u0026lt;img src=\u0026quot;{{ .Get \u0026quot;src\u0026quot; }}\u0026quot; {{ if or (.Get \u0026quot;alt\u0026quot;) (.Get \u0026quot;caption\u0026quot;) }}alt=\u0026quot;{{ with .Get \u0026quot;alt\u0026quot;}}{{.}}{{else}}{{ .Get \u0026quot;caption\u0026quot; }}{{ end }}\u0026quot;{{ end }} /\u0026gt; {{ if .Get \u0026quot;link\u0026quot;}}\u0026lt;/a\u0026gt;{{ end }} {{ if or (or (.Get \u0026quot;title\u0026quot;) (.Get \u0026quot;caption\u0026quot;)) (.Get \u0026quot;attr\u0026quot;)}} \u0026lt;figcaption\u0026gt;{{ if isset .Params \u0026quot;title\u0026quot; }} {{ .Get \u0026quot;title\u0026quot; }}{{ end }} {{ if or (.Get \u0026quot;caption\u0026quot;) (.Get \u0026quot;attr\u0026quot;)}}\u0026lt;p\u0026gt; {{ .Get \u0026quot;caption\u0026quot; }} {{ with .Get \u0026quot;attrlink\u0026quot;}}\u0026lt;a href=\u0026quot;{{.}}\u0026quot;\u0026gt; {{ end }} {{ .Get \u0026quot;attr\u0026quot; }} {{ if .Get \u0026quot;attrlink\u0026quot;}}\u0026lt;/a\u0026gt; {{ end }} \u0026lt;/p\u0026gt; {{ end }} \u0026lt;/figcaption\u0026gt; {{ end }} \u0026lt;/figure\u0026gt; \u0026lt;!-- image --\u0026gt; Usage # I simply changed:\n{% image full http://farm5.staticflickr.com/4136/4829260124_57712e570a_o_d.jpg \u0026quot;One of my favorite touristy-type photos. I secretly waited for the good light while we were \u0026quot;having fun\u0026quot; and took this. Only regret: a stupid pole in the top-left corner of the frame I had to clumsily get rid of at post-processing.\u0026quot; -\u0026gt;http://www.flickr.com/photos/alexnormand/4829260124/in/set-72157624547713078/ %} to this (this example uses a slightly extended version named fig, different than the built-in figure):\n{{% fig class=\u0026quot;full\u0026quot; src=\u0026quot;http://farm5.staticflickr.com/4136/4829260124_57712e570a_o_d.jpg\u0026quot; title=\u0026quot;One of my favorite touristy-type photos. I secretly waited for the good light while we were having fun and took this. Only regret: a stupid pole in the top-left corner of the frame I had to clumsily get rid of at post-processing.\u0026quot; link=\u0026quot;http://www.flickr.com/photos/alexnormand/4829260124/in/set-72157624547713078/\u0026quot; %}} As a bonus, the shortcode named parameters are, arguably, more readable.\nFinishing touches # Fix content # Depending on the amount of customization that was done with each post with Jekyll, this step will require more or less effort. There are no hard and fast rules here except that hugo server --watch is your friend. Test your changes and fix errors as needed.\nClean up # You\u0026rsquo;ll want to remove the Jekyll configuration at this point. If you have anything else that isn\u0026rsquo;t used, delete it.\nA practical example in a diff # Hey, it\u0026rsquo;s Alex was migrated in less than a father-with-kids day from Jekyll to Hugo. You can see all the changes (and screw-ups) by looking at this diff.\n"},{"id":2,"href":"/showcase/posts/goisforlovers/","title":"(Hu)go Template Primer","section":"Blog","content":"Hugo uses the excellent Go html/template library for its template engine. It is an extremely lightweight engine that provides a very small amount of logic. In our experience that it is just the right amount of logic to be able to create a good static website. If you have used other template systems from different languages or frameworks you will find a lot of similarities in Go templates.\nThis document is a brief primer on using Go templates. The Go docs provide more details.\nIntroduction to Go Templates # Go templates provide an extremely simple template language. It adheres to the belief that only the most basic of logic belongs in the template or view layer. One consequence of this simplicity is that Go templates parse very quickly.\nA unique characteristic of Go templates is they are content aware. Variables and content will be sanitized depending on the context of where they are used. More details can be found in the Go docs.\nBasic Syntax # Golang templates are HTML files with the addition of variables and functions.\nGo variables and functions are accessible within {{ }}\nAccessing a predefined variable \u0026ldquo;foo\u0026rdquo;:\n{{ foo }} Parameters are separated using spaces\nCalling the add function with input of 1, 2:\n{{ add 1 2 }} Methods and fields are accessed via dot notation\nAccessing the Page Parameter \u0026ldquo;bar\u0026rdquo;\n{{ .Params.bar }} Parentheses can be used to group items together\n{{ if or (isset .Params \u0026quot;alt\u0026quot;) (isset .Params \u0026quot;caption\u0026quot;) }} Caption {{ end }} Variables # Each Go template has a struct (object) made available to it. In hugo each template is passed either a page or a node struct depending on which type of page you are rendering. More details are available on the variables page.\nA variable is accessed by referencing the variable name.\n\u0026lt;title\u0026gt;{{ .Title }}\u0026lt;/title\u0026gt; Variables can also be defined and referenced.\n{{ $address := \u0026quot;123 Main St.\u0026quot;}} {{ $address }} Functions # Go template ship with a few functions which provide basic functionality. The Go template system also provides a mechanism for applications to extend the available functions with their own. Hugo template functions provide some additional functionality we believe are useful for building websites. Functions are called by using their name followed by the required parameters separated by spaces. Template functions cannot be added without recompiling hugo.\nExample:\n{{ add 1 2 }} Includes # When including another template you will pass to it the data it will be able to access. To pass along the current context please remember to include a trailing dot. The templates location will always be starting at the /layout/ directory within Hugo.\nExample:\n{{ template \u0026quot;chrome/header.html\u0026quot; . }} Logic # Go templates provide the most basic iteration and conditional logic.\nIteration # Just like in Go, the Go templates make heavy use of range to iterate over a map, array or slice. The following are different examples of how to use range.\nExample 1: Using Context\n{{ range array }} {{ . }} {{ end }} Example 2: Declaring value variable name\n{{range $element := array}} {{ $element }} {{ end }} Example 2: Declaring key and value variable name\n{{range $index, $element := array}} {{ $index }} {{ $element }} {{ end }} Conditionals # If, else, with, or, \u0026amp; and provide the framework for handling conditional logic in Go Templates. Like range, each statement is closed with end.\nGo Templates treat the following values as false:\nfalse 0 any array, slice, map, or string of length zero Example 1: If\n{{ if isset .Params \u0026quot;title\u0026quot; }}\u0026lt;h4\u0026gt;{{ index .Params \u0026quot;title\u0026quot; }}\u0026lt;/h4\u0026gt;{{ end }} Example 2: If -\u0026gt; Else\n{{ if isset .Params \u0026quot;alt\u0026quot; }} {{ index .Params \u0026quot;alt\u0026quot; }} {{else}} {{ index .Params \u0026quot;caption\u0026quot; }} {{ end }} Example 3: And \u0026amp; Or\n{{ if and (or (isset .Params \u0026quot;title\u0026quot;) (isset .Params \u0026quot;caption\u0026quot;)) (isset .Params \u0026quot;attr\u0026quot;)}} Example 4: With\nAn alternative way of writing \u0026ldquo;if\u0026rdquo; and then referencing the same value is to use \u0026ldquo;with\u0026rdquo; instead. With rebinds the context . within its scope, and skips the block if the variable is absent.\nThe first example above could be simplified as:\n{{ with .Params.title }}\u0026lt;h4\u0026gt;{{ . }}\u0026lt;/h4\u0026gt;{{ end }} Example 5: If -\u0026gt; Else If\n{{ if isset .Params \u0026quot;alt\u0026quot; }} {{ index .Params \u0026quot;alt\u0026quot; }} {{ else if isset .Params \u0026quot;caption\u0026quot; }} {{ index .Params \u0026quot;caption\u0026quot; }} {{ end }} Pipes # One of the most powerful components of Go templates is the ability to stack actions one after another. This is done by using pipes. Borrowed from unix pipes, the concept is simple, each pipeline\u0026rsquo;s output becomes the input of the following pipe.\nBecause of the very simple syntax of Go templates, the pipe is essential to being able to chain together function calls. One limitation of the pipes is that they only can work with a single value and that value becomes the last parameter of the next pipeline.\nA few simple examples should help convey how to use the pipe.\nExample 1 :\n{{ if eq 1 1 }} Same {{ end }} is the same as\n{{ eq 1 1 | if }} Same {{ end }} It does look odd to place the if at the end, but it does provide a good illustration of how to use the pipes.\nExample 2 :\n{{ index .Params \u0026quot;disqus_url\u0026quot; | html }} Access the page parameter called \u0026ldquo;disqus_url\u0026rdquo; and escape the HTML.\nExample 3 :\n{{ if or (or (isset .Params \u0026quot;title\u0026quot;) (isset .Params \u0026quot;caption\u0026quot;)) (isset .Params \u0026quot;attr\u0026quot;)}} Stuff Here {{ end }} Could be rewritten as\n{{ isset .Params \u0026quot;caption\u0026quot; | or isset .Params \u0026quot;title\u0026quot; | or isset .Params \u0026quot;attr\u0026quot; | if }} Stuff Here {{ end }} Context (aka. the dot) # The most easily overlooked concept to understand about Go templates is that {{ . }} always refers to the current context. In the top level of your template this will be the data set made available to it. Inside of a iteration it will have the value of the current item. When inside of a loop the context has changed. . will no longer refer to the data available to the entire page. If you need to access this from within the loop you will likely want to set it to a variable instead of depending on the context.\nExample:\n{{ $title := .Site.Title }} {{ range .Params.tags }} \u0026lt;li\u0026gt; \u0026lt;a href=\u0026quot;{{ $baseurl }}/tags/{{ . | urlize }}\u0026quot;\u0026gt;{{ . }}\u0026lt;/a\u0026gt; - {{ $title }} \u0026lt;/li\u0026gt; {{ end }} Notice how once we have entered the loop the value of {{ . }} has changed. We have defined a variable outside of the loop so we have access to it from within the loop.\nHugo Parameters # Hugo provides the option of passing values to the template language through the site configuration (for sitewide values), or through the meta data of each specific piece of content. You can define any values of any type (supported by your front matter/config format) and use them however you want to inside of your templates.\nUsing Content (page) Parameters # In each piece of content you can provide variables to be used by the templates. This happens in the front matter.\nAn example of this is used in this documentation site. Most of the pages benefit from having the table of contents provided. Sometimes the TOC just doesn\u0026rsquo;t make a lot of sense. We\u0026rsquo;ve defined a variable in our front matter of some pages to turn off the TOC from being displayed.\nHere is the example front matter:\n--- title: \u0026#34;Permalinks\u0026#34; date: \u0026#34;2013-11-18\u0026#34; aliases: - \u0026#34;/doc/permalinks/\u0026#34; groups: [\u0026#34;extras\u0026#34;] groups_weight: 30 notoc: true --- Here is the corresponding code inside of the template:\n{{ if not .Params.notoc }} \u0026lt;div id=\u0026quot;toc\u0026quot; class=\u0026quot;well col-md-4 col-sm-6\u0026quot;\u0026gt; {{ .TableOfContents }} \u0026lt;/div\u0026gt; {{ end }} Using Site (config) Parameters # In your top-level configuration file (eg, config.yaml) you can define site parameters, which are values which will be available to you in chrome.\nFor instance, you might declare:\nparams: CopyrightHTML: \u0026#34;Copyright \u0026amp;#xA9; 2013 John Doe. All Rights Reserved.\u0026#34; TwitterUser: \u0026#34;spf13\u0026#34; SidebarRecentLimit: 5 Within a footer layout, you might then declare a \u0026lt;footer\u0026gt; which is only provided if the CopyrightHTML parameter is provided, and if it is given, you would declare it to be HTML-safe, so that the HTML entity is not escaped again. This would let you easily update just your top-level config file each January 1st, instead of hunting through your templates.\n{{if .Site.Params.CopyrightHTML}}\u0026lt;footer\u0026gt; \u0026lt;div class=\u0026#34;text-center\u0026#34;\u0026gt;{{.Site.Params.CopyrightHTML | safeHtml}}\u0026lt;/div\u0026gt; \u0026lt;/footer\u0026gt;{{end}} An alternative way of writing the \u0026ldquo;if\u0026rdquo; and then referencing the same value is to use \u0026ldquo;with\u0026rdquo; instead. With rebinds the context . within its scope, and skips the block if the variable is absent:\n{{with .Site.Params.TwitterUser}}\u0026lt;span class=\u0026#34;twitter\u0026#34;\u0026gt; \u0026lt;a href=\u0026#34;https://twitter.com/{{.}}\u0026#34; rel=\u0026#34;author\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;/images/twitter.png\u0026#34; width=\u0026#34;48\u0026#34; height=\u0026#34;48\u0026#34; title=\u0026#34;Twitter: {{.}}\u0026#34; alt=\u0026#34;Twitter\u0026#34;\u0026gt;\u0026lt;/a\u0026gt; \u0026lt;/span\u0026gt;{{end}} Finally, if you want to pull \u0026ldquo;magic constants\u0026rdquo; out of your layouts, you can do so, such as in this example:\n\u0026lt;nav class=\u0026#34;recent\u0026#34;\u0026gt; \u0026lt;h1\u0026gt;Recent Posts\u0026lt;/h1\u0026gt; \u0026lt;ul\u0026gt;{{range first .Site.Params.SidebarRecentLimit .Site.Recent}} \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;{{.RelPermalink}}\u0026#34;\u0026gt;{{.Title}}\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; {{end}}\u0026lt;/ul\u0026gt; \u0026lt;/nav\u0026gt; "},{"id":3,"href":"/showcase/posts/hugoisforlovers/","title":"Getting Started with Hugo","section":"Blog","content":" Step 1. Install Hugo # Go to Hugo releases and download the appropriate version for your OS and architecture.\nSave it somewhere specific as we will be using it in the next step.\nMore complete instructions are available at Install Hugo\nStep 2. Build the Docs # Hugo has its own example site which happens to also be the documentation site you are reading right now.\nFollow the following steps:\nClone the Hugo repository Go into the repo Run hugo in server mode and build the docs Open your browser to http://localhost:1313 Corresponding pseudo commands:\ngit clone https://github.com/spf13/hugo cd hugo /path/to/where/you/installed/hugo server --source=./docs \u0026gt; 29 pages created \u0026gt; 0 tags index created \u0026gt; in 27 ms \u0026gt; Web Server is available at http://localhost:1313 \u0026gt; Press ctrl+c to stop Once you\u0026rsquo;ve gotten here, follow along the rest of this page on your local build.\nStep 3. Change the docs site # Stop the Hugo process by hitting Ctrl+C.\nNow we are going to run hugo again, but this time with hugo in watch mode.\n/path/to/hugo/from/step/1/hugo server --source=./docs --watch \u0026gt; 29 pages created \u0026gt; 0 tags index created \u0026gt; in 27 ms \u0026gt; Web Server is available at http://localhost:1313 \u0026gt; Watching for changes in /Users/spf13/Code/hugo/docs/content \u0026gt; Press ctrl+c to stop Open your favorite editor and change one of the source content pages. How about changing this very file to fix the typo. How about changing this very file to fix the typo.\nContent files are found in docs/content/. Unless otherwise specified, files are located at the same relative location as the url, in our case docs/content/overview/quickstart.md.\nChange and save this file.. Notice what happened in your terminal.\n\u0026gt; Change detected, rebuilding site \u0026gt; 29 pages created \u0026gt; 0 tags index created \u0026gt; in 26 ms Refresh the browser and observe that the typo is now fixed.\nNotice how quick that was. Try to refresh the site before it\u0026rsquo;s finished building. I double dare you. Having nearly instant feedback enables you to have your creativity flow without waiting for long builds.\nStep 4. Have fun # The best way to learn something is to play with it.\n"},{"id":4,"href":"/showcase/docs/shortcodes/Alex-Jose-Alberto-Barreto-Cajica/","title":"Alex Jose Alberto Barreto Cajica","section":"Shortcodes","content":" Alex Jose Alberto Barreto Cajica # Interests # Desarrollo de software, computacion en la nube, Big Data, BlockChain.\nContacto # aabarretoc@unal.edu.co\n"},{"id":5,"href":"/showcase/docs/shortcodes/Alex-Barreto-Taller-3/imageProcessingAB/","title":"Image Processing Ab","section":"Alex Barreto Taller 3","content":" Procesamiento digital de imágenes # El procesamiento de imágenes digitales es el conjunto de técnicas que se aplican a las imágenes digitales con el objetivo de mejorar la calidad o facilitar la búsqueda de información.\nProceso de filtrado # Es el conjunto de técnicas englobadas dentro del preprocesamiento de imágenes cuyo objetivo fundamental es obtener, a partir de una imagen origen, otra final cuyo resultado sea más adecuado para una aplicación específica mejorando ciertas características de la misma que posibilite efectuar operaciones del procesado sobre ella.\nLos principales objetivos que se persiguen con la aplicación de filtros son:\nSuavizar la imagen: reduce la cantidad de variaciones de intensidad entre píxeles vecinos. Eliminar ruido: eliminar aquellos píxeles cuyo nivel de intensidad es muy diferente al de sus vecinos y cuyo origen puede estar tanto en el proceso de adquisición de la imagen como en el de transmisión. Realzar bordes: destacar los bordes que se localizan en una imagen. Detectar bordes: detectar los píxeles donde se produce un cambio brusco en la función intensidad. Por tanto, se consideran los filtros como operaciones que se aplican a los píxeles de una imagen digital para optimizarla, enfatizar cierta información o conseguir un efecto especial en ella.\nEl proceso de filtrado puede llevarse a cabo sobre los dominios de frecuencia y/o espacio, el trabajo llevado a lo largo del curso se realiza un filtrado y procesamiento en el espacio.\nLas operaciones de filtrado se llevan a cabo directamente sobre los píxeles de la imagen. En este proceso se relaciona, para todos y cada uno de los puntos de la imagen, un conjunto de píxeles próximos al píxel objetivo con la finalidad de obtener una información útil, dependiente del tipo de filtro aplicado, que permita actuar sobre el píxel concreto en que se está llevando a cabo el proceso de filtrado para, de este modo, obtener mejoras sobre la imagen y/o datos que podrían ser utilizados en futuras acciones o procesos de trabajo sobre ella.\nKernel # Un kernel es una matriz pequeña que se utiliza para desenfocar, agudizar, grabar, detectar bordes, entre otros. Esto se logra mediante el proceso de agregar cada elemento de la imagen a sus vecinos locales, ponderados por el kernel.\nluminosidad # La definición de una dimensión de luminosidad o valor no es obvia: hay varias posibilidades según el propósito y los objetivos de la representación.\nCuatro de las más comunes son:\nEl enfoque más simple es el de la media aritmética de los tres componentes del color en el modelo RGB. I = avg(R,G,B)\nEn el modelo HSV, el valor se define como el componente más grande de un color. V = max(R,G,B)\nEn el modelo HSL, la luminosidad se define como el promedio de los componentes de color más grande y más pequeño. L = mid(R,G,B)\nUna alternativa más relevante es usar luma la cual consiste en calcular el promedio ponderado de R , G y B con corrección de gamma , en función de su contribución a la luminosidad percibida, utilizada durante mucho tiempo como la dimensión monocromática en la transmisión de televisión en color, la cual posee coeficientes distintos para cada componente del color con lo que el peso al momento de realizar el promedio no es igual por parte de cada componente. Implementacion # Con el uso de shaders la implementacion de cada una de las mascaros de convolucion o calculo de luminosidad para cada pixel de la imagen en codigo fuente no es facil de ver a primera vista, pero su eficiencia y simplificacion de codigo fuente permite un desarrollo que con pocas lineas se realizen transformaciones optimas.\nComo primera aproximacion se replica la transformacion realizada en el libro Visual Computing\nAdemas de manera facil se puede aplicar las convoluciones o transformaciones de la imagen sobre un area en especifico sin afectar a la totalidad de la imagen e ir moviendo con el mouse el lugar donde se quiere aplicar la trasnformacion, o cambiando el tamaño del objeto mismo. Basado en \u0026ldquo;The Book of Shaders\u0026rdquo; donde documentan la funcion Distance(), se realizo la implementacion donde se genera una region circular que sigue el puntero al pasar sobre la imagen aplicando la transformacion deseada, ademas inspirado en Image Kernels se crea una seccion de cajas de texto representativas al kernel, donde se pueden ir modificando los valores que se aplican en la convolucion.\nResultados # Por defecto se aplica un kernel de convolucion sobre la imagen, pero puede elegirse para aplicar sobre video, ademas de la transformacion a otros valores de luminosidad, para cuando se seleccione la aplicacion del kernel puede modificarse los valores y se vera el resultado de inmediato, ademas de poseer botones para aplicar mascaras ya definidas en la literatura.\nmask.js let maskShader; let img; let video_src; let video_on; let mask; let alto = 500; let radio; let grey_scale; let igrey_scale; let vgrey_scale; let lgrey_scale; let hsvgrey_scale; A=0; B=0; C=0; D=0; E=1; F=0; G=0; H=0; I=0; function preload() { video_src = createVideo([\u0026#39;/showcase/sketches/mandrill.webm\u0026#39;]); maskShader = readShader(\u0026#39;/showcase/sketches/shaders/maskABExample.frag\u0026#39;, { varyings: Tree.texcoords2 }); img = loadImage(\u0026#39;/showcase/sketches/arboles.jpg\u0026#39;); } function setup() { createCanvas(650, alto, WEBGL); noStroke(); textureMode(NORMAL); video_on = createCheckbox(\u0026#39;video\u0026#39;, false); video_on.style(\u0026#39;color\u0026#39;, \u0026#39;white\u0026#39;); video_on.changed(() =\u0026gt; { if (video_on.checked()) { maskShader.setUniform(\u0026#39;texture\u0026#39;, video_src); video_src.loop(); } else { maskShader.setUniform(\u0026#39;texture\u0026#39;, img); video_src.pause(); } }); video_on.position(10, (alto +30)); mask = createCheckbox(\u0026#39;Aplicar mascara con los siguientes valores:\u0026#39;, true); mask.position(10, (alto +70)); mask.style(\u0026#39;color\u0026#39;, \u0026#39;white\u0026#39;); mask.changed(maskmyCheckedEvent); shader(maskShader); maskShader.setUniform(\u0026#39;texture\u0026#39;, img); emitTexOffset(maskShader, img, \u0026#39;texOffset\u0026#39;); radio = createSlider(0, 1, 0.2, 0.05); radio.position(10, (alto +50)); radio.style(\u0026#39;width\u0026#39;, \u0026#39;280px\u0026#39;); grey_scale = createCheckbox(\u0026#39;luma\u0026#39;, false); grey_scale.position(75, (alto +30)); grey_scale.style(\u0026#39;color\u0026#39;, \u0026#39;white\u0026#39;); grey_scale.changed(greymyCheckedEvent); igrey_scale = createCheckbox(\u0026#39;Promedio\u0026#39;, false); igrey_scale.position(130, (alto +30)); igrey_scale.style(\u0026#39;color\u0026#39;, \u0026#39;white\u0026#39;); igrey_scale.changed(imyCheckedEvent); vgrey_scale = createCheckbox(\u0026#39;valor V\u0026#39;, false); vgrey_scale.position(215, (alto +30)); vgrey_scale.style(\u0026#39;color\u0026#39;, \u0026#39;white\u0026#39;); vgrey_scale.changed(vmyCheckedEvent); lgrey_scale = createCheckbox(\u0026#39;luminosidad L\u0026#39;, false); lgrey_scale.position(285, (alto +30)); lgrey_scale.style(\u0026#39;color\u0026#39;, \u0026#39;white\u0026#39;); lgrey_scale.changed(lmyCheckedEvent); hsvgrey_scale = createCheckbox(\u0026#39;HSV\u0026#39;, false); hsvgrey_scale.position(400, (alto +30)); hsvgrey_scale.style(\u0026#39;color\u0026#39;, \u0026#39;white\u0026#39;); hsvgrey_scale.changed(hsvmyCheckedEvent); ASlider = createInput(-1); ASlider.position(10, (alto +100)); ASlider.size(60); BSlider = createInput(-1); BSlider.position(80, (alto +100)); BSlider.size(60); CSlider = createInput(-1); CSlider.position(150, (alto +100)); CSlider.size(60); DSlider = createInput(-1); DSlider.position(10, (alto +130)); DSlider.size(60); ESlider = createInput(8); ESlider.position(80, (alto +130)); ESlider.size(60); FSlider = createInput(-1); FSlider.position(150, (alto +130)); FSlider.size(60); GSlider = createInput(-1); GSlider.position(10, (alto +160)); GSlider.size(60); HSlider = createInput(-1); HSlider.position(80, (alto +160)); HSlider.size(60); ISlider = createInput(-1); ISlider.position(150, (alto +160)); ISlider.size(60); button = createButton(\u0026#39;Blur\u0026#39;); button.position(10, (alto +190)); button.mousePressed(blur); button = createButton(\u0026#39;Outline\u0026#39;); button.position(10, (alto +220)); button.mousePressed(outline);\tbutton = createButton(\u0026#39;Right Sobel\u0026#39;); button.position(10, (alto +250)); button.mousePressed(ritsobel); button = createButton(\u0026#39;Emboss\u0026#39;); button.position(10, (alto +280)); button.mousePressed(emboss);\tbutton = createButton(\u0026#39;Bottom Sobel\u0026#39;); button.position(10, (alto +310)); button.mousePressed(botsob); } function draw() { background(0); maskShader.setUniform(\u0026#39;maskDefault\u0026#39;, [0, 0, 0, 0, 1, 0, 0, 0, 0]); const x_mouse = parseFloat((mouseX * pixelDensity())/width); const y_mouse = parseFloat(((mouseY) * pixelDensity())/height); maskShader.setUniform(\u0026#39;radio\u0026#39;, radio.value()); maskShader.setUniform(\u0026#39;mouse_position_x\u0026#39;, x_mouse); maskShader.setUniform(\u0026#39;mouse_position_y\u0026#39;, y_mouse); A = ASlider.value(); B = BSlider.value(); C = CSlider.value(); D = DSlider.value(); E = ESlider.value(); F = FSlider.value(); G = GSlider.value(); H = HSlider.value(); I = ISlider.value(); maskShader.setUniform(\u0026#39;grey_scale\u0026#39;, grey_scale.checked()); maskShader.setUniform(\u0026#39;igrey_scale\u0026#39;, igrey_scale.checked()); maskShader.setUniform(\u0026#39;vgrey_scale\u0026#39;, vgrey_scale.checked()); maskShader.setUniform(\u0026#39;lgrey_scale\u0026#39;, lgrey_scale.checked()); maskShader.setUniform(\u0026#39;hsvgrey_scale\u0026#39;, hsvgrey_scale.checked()); maskShader.setUniform(\u0026#39;mascara\u0026#39;, mask.checked()); video_on.changed(() =\u0026gt; { if (video_on.checked()) { maskShader.setUniform(\u0026#39;texture\u0026#39;, video_src); video_src.loop(); } else { maskShader.setUniform(\u0026#39;texture\u0026#39;, img); video_src.pause(); } }); if (mask.checked()) { maskShader.setUniform(\u0026#39;mask\u0026#39;, [A, B, C, D, E, F, G, H, I]); } else { maskShader.setUniform(\u0026#39;mask\u0026#39;, [0, 0, 0, 0, 1, 0, 0, 0, 0]); } quad(-width / 2, -height / 2, width / 2, -height / 2, width / 2, height / 2, -width / 2, height / 2); } function botsob() { A=-1; B=-2; C=-1; D=0; E=0; F=0; G=1; H=2; I=1; ASlider.value(A); BSlider.value(B); CSlider.value(C); DSlider.value(D); ESlider.value(E); FSlider.value(F); GSlider.value(G); HSlider.value(H); ISlider.value(I); } function outline() { A=-5; B=4; C=0; D=0; E=2; F=0; G=0; H=-1; I=0; ASlider.value(A); BSlider.value(B); CSlider.value(C); DSlider.value(D); ESlider.value(E); FSlider.value(F); GSlider.value(G); HSlider.value(H); ISlider.value(I); } function blur() { A=0.0625; B=0.125; C=0.0625; D=0.125; E=0.25; F=0.125; G=0.0625; H=0.125; I=0.0625; ASlider.value(A); BSlider.value(B); CSlider.value(C); DSlider.value(D); ESlider.value(E); FSlider.value(F); GSlider.value(G); HSlider.value(H); ISlider.value(I); } function ritsobel(){ A=-32; B=50; C=45; D=-81; E=63; F=68; G=-68; H=59; I=59; ASlider.value(A); BSlider.value(B); CSlider.value(C); DSlider.value(D); ESlider.value(E); FSlider.value(F); GSlider.value(G); HSlider.value(H); ISlider.value(I); } function emboss(){ A=-1.8; B=-1; C=0; D=-1; E=1.5; F= 1.5; G=0.1; H=1.5; I=2.5; ASlider.value(A); BSlider.value(B); CSlider.value(C); DSlider.value(D); ESlider.value(E); FSlider.value(F); GSlider.value(G); HSlider.value(H); ISlider.value(I); } function maskmyCheckedEvent() { if (mask.checked()) { grey_scale.checked(false); igrey_scale.checked(false); vgrey_scale.checked(false); lgrey_scale.checked(false); hsvgrey_scale.checked(false); console.log(\u0026#39;mascara!\u0026#39;); } } function greymyCheckedEvent() { if (grey_scale.checked()){ mask.checked(false); igrey_scale.checked(false); vgrey_scale.checked(false); lgrey_scale.checked(false); hsvgrey_scale.checked(false); console.log(\u0026#39;grey_scale!\u0026#39;); } } function imyCheckedEvent() { if (igrey_scale.checked()){ mask.checked(false); grey_scale.checked(false); vgrey_scale.checked(false); lgrey_scale.checked(false); hsvgrey_scale.checked(false); console.log(\u0026#39;igrey_scale!\u0026#39;); } } function vmyCheckedEvent() { if (vgrey_scale.checked()){ mask.checked(false); grey_scale.checked(false); igrey_scale.checked(false); lgrey_scale.checked(false); hsvgrey_scale.checked(false); console.log(\u0026#39;vgrey_scale!\u0026#39;); } } function lmyCheckedEvent() { if (lgrey_scale.checked()){ mask.checked(false); grey_scale.checked(false); igrey_scale.checked(false); vgrey_scale.checked(false); hsvgrey_scale.checked(false); console.log(\u0026#39;lgrey_scale!\u0026#39;); } } function hsvmyCheckedEvent() { if (hsvgrey_scale.checked()){ mask.checked(false); grey_scale.checked(false); igrey_scale.checked(false); vgrey_scale.checked(false); lgrey_scale.checked(false); console.log(\u0026#39;hsvgrey_scale!\u0026#39;); } } mask.frag precision mediump float; uniform sampler2D texture; uniform vec2 texOffset; // holds the 3x3 kernel uniform float mask[9]; uniform float maskDefault[9]; uniform float radio; uniform float mouse_position_x; uniform float mouse_position_y; uniform bool grey_scale; uniform bool igrey_scale; uniform bool vgrey_scale; uniform bool lgrey_scale; uniform bool hsvgrey_scale; uniform bool mascara; // we need our interpolated tex coord varying vec2 texcoords2; // returns luma of given texel // Codigo tomado de https://visualcomputing.github.io/docs/shaders/texturing/#texture-sampling float luma(vec3 texel) { return 0.299 * texel.r + 0.587 * texel.g + 0.114 * texel.b; } // returns the color HSV // Codigo tomado de http://lolengine.net/blog/2013/07/27/rgb-to-hsv-in-glsl vec3 rgb2hsv(vec3 c) { vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0); vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g)); vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r)); float d = q.x - min(q.w, q.y); float e = 1.0e-10; return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x); } // insperado en las ecuaciones de luminicidad presentadas en // https://en.wikipedia.org/wiki/HSL_and_HSV#:~:text=of%20about%2013.4%25.-,Lightness,-%5Bedit%5D float Irgb(vec3 texel) { return (texel.r + texel.g + texel.b)/3.0; } float Vhsv(vec3 texel) { float M =0.0; if(texel.r\u0026gt;M){ M=texel.r; } if(texel.g\u0026gt;M){ M=texel.g; } if(texel.b\u0026gt;M){ M=texel.b; } return M; } float Lhsl(vec3 texel) { float M =0.0; if(texel.r\u0026gt;M){ M=texel.r; } if(texel.g\u0026gt;M){ M=texel.g; } if(texel.b\u0026gt;M){ M=texel.b; } float min =255.0; if(texel.r\u0026lt;min){ min=texel.r; } if(texel.g\u0026lt;min){ min=texel.g; } if(texel.b\u0026lt;min){ min=texel.b; } return (M + min)/2.0; } void main() { vec2 st = vec2(mouse_position_x,mouse_position_y); float pct = 0.0; pct = distance(st,texcoords2); // 1. Use offset to move along texture space. // In this case to find the texcoords of the texel neighbours. vec2 tc0 = texcoords2 + vec2(-texOffset.s, -texOffset.t); vec2 tc1 = texcoords2 + vec2( 0.0, -texOffset.t); vec2 tc2 = texcoords2 + vec2(+texOffset.s, -texOffset.t); vec2 tc3 = texcoords2 + vec2(-texOffset.s, 0.0); // origin (current fragment texcoords) vec2 tc4 = texcoords2 + vec2( 0.0, 0.0); vec2 tc5 = texcoords2 + vec2(+texOffset.s, 0.0); vec2 tc6 = texcoords2 + vec2(-texOffset.s, +texOffset.t); vec2 tc7 = texcoords2 + vec2( 0.0, +texOffset.t); vec2 tc8 = texcoords2 + vec2(+texOffset.s, +texOffset.t); // 2. Sample texel neighbours within the rgba array vec4 rgba[9]; rgba[0] = texture2D(texture, tc0); rgba[1] = texture2D(texture, tc1); rgba[2] = texture2D(texture, tc2); rgba[3] = texture2D(texture, tc3); rgba[4] = texture2D(texture, tc4); rgba[5] = texture2D(texture, tc5); rgba[6] = texture2D(texture, tc6); rgba[7] = texture2D(texture, tc7); rgba[8] = texture2D(texture, tc8); // 3. Apply convolution kernel vec4 convolution; if(pct\u0026lt;radio){ vec4 texel = texture2D(texture, texcoords2); if(grey_scale){ convolution += vec4(vec3(luma(texel.rgb)), 1.0); } else if(igrey_scale){ convolution += vec4(vec3(Irgb(texel.rgb)), 1.0); } else if(vgrey_scale){ convolution += vec4(vec3(Vhsv(texel.rgb)), 1.0); } else if(lgrey_scale){ convolution += vec4(vec3(Lhsl(texel.rgb)), 1.0); } else if(hsvgrey_scale){ convolution += vec4(rgb2hsv(texel.rgb), 1.0); } else if(mascara){ for (int i = 0; i \u0026lt; 9; i++) { convolution += rgba[i]*mask[i]; } } else { for (int i = 0; i \u0026lt; 9; i++) { convolution += rgba[i]*maskDefault[i]; } } } else { for (int i = 0; i \u0026lt; 9; i++) { convolution += rgba[i]*maskDefault[i]; } } // 4. Set color from convolution gl_FragColor = vec4(convolution.rgb, 1.0); } Region of Lupa # Conclusiones y trabajo futuro # CONCLUSIONES: # El procesamiento de imágenes realizado por software y secuencialmente toma demasiado tiempo de procesamiento, pero con el uso de shaders, el tiempo ya no es un problema, la diferencia entre los tiempos de renderizacion de la implementacion del taller 1 a lo realizado en este punto es muy grande, en la primera entrega era necesario diligenciar los valores de la matriz y luego si lanzar la convolucion pero tardaba demasiado, en este punto se pueden realizar los cambios en linea y los resultados se ven de inmediato, visualizando las implementaciones en equipos de las mismas condiciones. TRABAJO FUTURO:\nComo trabajo futuro, se espera poder aplicar un mayor número de filtros a una misma imagen, individualmente y combinados, ya que la combinación de diferentes kernels puede dar mejores resultados. Según la aplicación, es posible que desee aplicar un filtro que elimine las imperfecciones o suavice una imagen y luego aplicar otro que detecte los bordes. Referencias # https://visualcomputing.github.io/docs/illusions/masking/ https://visualcomputing.github.io/docs/shaders/image_processing/ https://es.wikipedia.org/wiki/Procesamiento_digital_de_im%C3%A1genes https://en.wikipedia.org/wiki/Kernel_%28image_processing%29 https://en.wikipedia.org/wiki/HSL_and_HSV https://setosa.io/ev/image-kernels/ https://thebookofshaders.com/glossary/?search=distance "},{"id":6,"href":"/showcase/docs/shortcodes/Alex-Barreto-Taller-3/proceduralTexturingAB/","title":"Procedural Texturing Ab","section":"Alex Barreto Taller 3","content":" Procedural texturing # Example # Ejercicio 1 # Ejercicio 2 # "},{"id":7,"href":"/showcase/docs/shortcodes/Alex-Barreto-Taller-3/ShadersColoring/","title":"Shaders Coloring","section":"Alex Barreto Taller 3","content":" Shaders coloring # Intoduction # Context # Results # p5-iframe markdown Texture 1 # Conclusions and Future work # "},{"id":8,"href":"/showcase/docs/shortcodes/Alex-Barreto-Taller-3/texturing3d/","title":"Texturing3d","section":"Alex Barreto Taller 3","content":" Texturing # Texture World # Texture Screen # "},{"id":9,"href":"/showcase/docs/shortcodes/Kevin-Leonardo-Alvarez-Mora/","title":"Kevin Leonardo Alvarez Mora","section":"Shortcodes","content":" Kevin Leonardo Alvarez Mora # Interests # Web development, Cybersecurity, Data Science\nContacto # klalvarezm@unal.edu.co\n"},{"id":10,"href":"/showcase/docs/shortcodes/Kevin-Alvarez-taller-3/Image-Processing/","title":"Image Processing","section":"Kevin Alvarez Taller 3","content":" Image Processing # Background # We can use a different set of algorithms to process (modify, transform) and image, in this case, we are going to use Convolutional Masks to transform an image and obtain different features of the image, and also we can see different effects on the image.\nConvolutional Masks # Is a small matrix (in our case is a 9x9 matrix) which includes weightings (set of values that gives \u0026ldquo;relevance\u0026rdquo;) which are applied on pixel values in order to change the image and create different effects. Convolution is the process of flipping both the rows and columns of the kernel (our matrix) and multiplying locally similar entries and summing. The element at the central coordinates of the resulting image would be a weighted combination of all the entries of the image matrix, with weights given by the kernel\nResults # Using our shader we could apply different effects by simply modifying the kernel values, to make the magnifying glass, we used p5\u0026rsquo;s function copy, that allows to take a rectangular section, stretching it, and the mapping this rectangle, giving the illusion of zooming in the image on an area.\nmask.js /*Testing*/ /*Testing*/ let maskShader; let img; let video_src; let video_on; let mask; function preload() { video_src = createVideo([\u0026#39;mandrill.webm\u0026#39;]); video_src.hide(); // by default video shows up in separate dom maskShader = readShader(\u0026#39;mask.frag\u0026#39;, { varyings: Tree.texcoords2 }); img = loadImage(\u0026#39;ojos.jpg\u0026#39;); } function setup() { // shaders require WEBGL mode to work createCanvas(650, 500, WEBGL); noStroke(); textureMode(NORMAL); video_on = createCheckbox(\u0026#39;video\u0026#39;, false); video_on.style(\u0026#39;color\u0026#39;, \u0026#39;white\u0026#39;); video_on.changed(() =\u0026gt; { if (video_on.checked()) { maskShader.setUniform(\u0026#39;texture\u0026#39;, video_src); video_src.loop(); } else { maskShader.setUniform(\u0026#39;texture\u0026#39;, img); video_src.pause(); } }); video_on.position(10, 10); //Adding kernel options option = createSelect(); option.position(520, 10); option.option(\u0026#34;None\u0026#34;, 0); option.option(\u0026#34;Blue\u0026#34;, 1); option.option(\u0026#34;Ridge\u0026#34;, 2); option.option(\u0026#34;Bottom Sobel\u0026#34;, 3); option.option(\u0026#34;Emboss\u0026#34;, 4); shader(maskShader); maskShader.setUniform(\u0026#39;texture\u0026#39;, img); emitTexOffset(maskShader, img, \u0026#39;texOffset\u0026#39;); } function draw() { background(0); // /* if (option.value()==0) { maskShader.setUniform(\u0026#39;mask\u0026#39;, [0, 0, 0, 0, 1, 0, 0, 0, 0]); } else if (option.value()==1) { maskShader.setUniform(\u0026#39;mask\u0026#39;, [0.0625, 0.125, 0.0625, 0.125, 0.25, 0.125, 0.0625, 0.125, 0.0625]); } else if (option.value()==2) { maskShader.setUniform(\u0026#39;mask\u0026#39;, [-2, -1, 0, -1, 1, 1, 0, 1, 2]); } else if (option.value()==3) { maskShader.setUniform(\u0026#39;mask\u0026#39;, [-1, -2, -1, 0, 0, 0, 1, 2, 1]); } else if (option.value()==4) { maskShader.setUniform(\u0026#39;mask\u0026#39;, [-1, -1, -1, -1, 8, -1, -1, -1, -1]); } quad(-width / 2, -height / 2, width / 2, -height / 2, width / 2, height / 2, -width / 2, height / 2); push(); // Origin X Y,taking size, Destination, Destination SIZE copy( mouseX - width/2, mouseY - height/2, 50, 50, mouseX - width/2, mouseY - height/2, 100, 100); stroke(255,0,0); noFill(); // Rectangle shows area being copied rect(mouseX - width/2, mouseY - height/2, 100, 100); pop(); } mask.frag precision mediump float; uniform sampler2D texture; uniform vec2 texOffset; // holds the 3x3 kernel uniform float mask[9]; // we need our interpolated tex coord varying vec2 texcoords2; void main() { // 1. Use offset to move along texture space. // In this case to find the texcoords of the texel neighbours. vec2 tc0 = texcoords2 + vec2(-texOffset.s, -texOffset.t); vec2 tc1 = texcoords2 + vec2( 0.0, -texOffset.t); vec2 tc2 = texcoords2 + vec2(+texOffset.s, -texOffset.t); vec2 tc3 = texcoords2 + vec2(-texOffset.s, 0.0); // origin (current fragment texcoords) vec2 tc4 = texcoords2 + vec2( 0.0, 0.0); vec2 tc5 = texcoords2 + vec2(+texOffset.s, 0.0); vec2 tc6 = texcoords2 + vec2(-texOffset.s, +texOffset.t); vec2 tc7 = texcoords2 + vec2( 0.0, +texOffset.t); vec2 tc8 = texcoords2 + vec2(+texOffset.s, +texOffset.t); // 2. Sample texel neighbours within the rgba array vec4 rgba[9]; rgba[0] = texture2D(texture, tc0); rgba[1] = texture2D(texture, tc1); rgba[2] = texture2D(texture, tc2); rgba[3] = texture2D(texture, tc3); rgba[4] = texture2D(texture, tc4); rgba[5] = texture2D(texture, tc5); rgba[6] = texture2D(texture, tc6); rgba[7] = texture2D(texture, tc7); rgba[8] = texture2D(texture, tc8); // 3. Apply convolution kernel vec4 convolution; for (int i = 0; i \u0026lt; 9; i++) { convolution += rgba[i]*mask[i]; } // 4. Set color from convolution gl_FragColor = vec4(convolution.rgb, 1.0); } Conclusions and Future Work # We discovered that using this method, we were able to obtain extremely fast loading times for the desired effects, specially compare to our first convolution method using software, now we can even apply masks to a video without any issue, contrary to our software method, that ran poorly and hanged often.\nReferences # https://setosa.io/ev/image-kernels/ https://www.tutorialspoint.com/dip/concept_of_convolution.htm https://p5js.org/reference/#/p5/copy https://github.com/processing/p5.js/issues/995 "},{"id":11,"href":"/showcase/docs/shortcodes/Kevin-Alvarez-taller-3/Normal-Map-Test/","title":"Normal Map Test","section":"Kevin Alvarez Taller 3","content":" Testing Lighting and Normal Mapping # Background # Result # Extremely slow, start at your own risk.\nMove your mouse to see how light interacts with the image.\nTaken from Andor Saga at : https://openprocessing.org/sketch/1221468\n"},{"id":12,"href":"/showcase/docs/shortcodes/Kevin-Alvarez-taller-3/Procedural-Texturing/","title":"Procedural Texturing","section":"Kevin Alvarez Taller 3","content":" Procedural Texturing # Background # Is the method of generating textures by providing a set of parameters, these parameters are sent to an algorithm (in our case a shader) and it will create its own variations, using this method, computers generate data automatically, it is quite useful to make large textures , that wouldn\u0026rsquo;t be practical doing by hand, also reduces the need of storage for textures, and provides almost unlimited texture resolution.\nUsing this method, we can create patters, without using too much computing power (the number of calculations should remain constant).\nResults # Keeping this idea in mind, we use a shader to implement various different patterns, you can choose the style of patter you want to see, use the sliders to change certain parameters of the pattern (like repetition, size or rotation). It is also interesting how we can send different parameters to our shader, like time, using this, we can create more vivid effects like color changing or movement of the texture (see Style 2, which changes its patterns almost every two seconds)\ntiles.js let pg; let truchetShader; let colorer; let colorer2; let styler; let gameStarted = false; function preload() { truchetShader = readShader(\u0026#39;truchet.frag\u0026#39;, { matrices: Tree.NONE, varyings: Tree.NONE }); } function setup() { colorer = Math.random() * 1.5; colorer2 = Math.random() * 1.5; truchetShader.setUniform(\u0026#39;v1\u0026#39;, colorer); truchetShader.setUniform(\u0026#39;v2\u0026#39;, colorer2); createCanvas(600, 600, WEBGL); // create frame buffer object to render the procedural texture pg = createGraphics(400, 400, WEBGL); textureMode(NORMAL); noStroke(); pg.noStroke(); pg.textureMode(NORMAL); // use truchetShader to render onto pg pg.shader(truchetShader); // emitResolution, see: // https://github.com/VisualComputing/p5.treegl#macros pg.emitResolution(truchetShader); // https://p5js.org/reference/#/p5.Shader/setUniform tiling = createSlider(0, 10, 1, 0.05); tiling.position(10, 30); tiling.style(\u0026#34;width\u0026#34;, \u0026#34;280px\u0026#34;); tiling2 = createSlider(3.14, 10, 3.14, 0.05); tiling2.position(10, 45); tiling2.style(\u0026#34;width\u0026#34;, \u0026#34;280px\u0026#34;); truchetShader.setUniform(\u0026#39;u_zoom\u0026#39;, 3); // pg clip-space quad (i.e., both x and y vertex coordinates ∈ [-1..1]) pg.quad(-1, -1, 1, -1, 1, 1, -1, 1); // set pg as texture texture(pg); option = createSelect(); option.position(10, 10); option.option(\u0026#34;Donut\u0026#34;, 0); option.option(\u0026#34;Cube\u0026#34;, 1); option.option(\u0026#34;Sphere\u0026#34;, 2); option.option(\u0026#34;Cone\u0026#34;, 3); option.option(\u0026#34;Cylinder\u0026#34;, 4); option2 = createSelect(); option2.position(400, 10); option2.option(\u0026#34;Style 1\u0026#34;, 0); option2.option(\u0026#34;Style 2\u0026#34;, 1); option2.option(\u0026#34;Style 3\u0026#34;, 2); option2.option(\u0026#34;Style 4\u0026#34;, 3); option2.option(\u0026#34;Style 5\u0026#34;, 4); } function draw() { background(120); orbitControl(); if(option2.value()==0){ styler=0; truchetShader.setUniform(\u0026#39;option\u0026#39;,styler); }else if(option2.value()==1){ styler=1; truchetShader.setUniform(\u0026#39;option\u0026#39;,styler); truchetShader.setUniform(\u0026#39;u_rotater\u0026#39;, tiling2.value(4)); }else if(option2.value()==2){ styler=2; truchetShader.setUniform(\u0026#39;option\u0026#39;,styler); }else if(option2.value()==3){ styler=3; truchetShader.setUniform(\u0026#39;option\u0026#39;,styler); }else if(option2.value()==4){ styler=4; truchetShader.setUniform(\u0026#39;option\u0026#39;,styler); } if(option.value()==0){ torus(100, 50); }else if(option.value()==1){ box(200, 200); }else if(option.value()==2){ sphere(100, 100); }else if(option.value()==3){ cone(100, 200); }else if(option.value()==4){ cylinder(100, 200); } truchetShader.setUniform(\u0026#39;u_zoom\u0026#39;, tiling.value()); truchetShader.setUniform(\u0026#39;u_rotater\u0026#39;, tiling2.value()); print(tiling2.value()); // pg clip-space quad (i.e., both x and y vertex coordinates ∈ [-1..1]) pg.quad(-1, -1, 1, -1, 1, 1, -1, 1); if(frameCount%60==0){ truchetShader.setUniform(\u0026#39;u_time\u0026#39;, frameCount/60); } } truchet.frag #ifdef GL_ES precision mediump float; #endif #define PI 3.14159265359 #define TWO_PI 6.28318530718 uniform vec2 u_resolution; uniform float u_time; uniform float u_zoom, u_rotater; uniform float v1,v2; uniform int option; uniform vec2 u_mouse; float shape(vec2 st, float N){ st = st*2.-1.; float a = atan(st.x,st.y)+PI; float r = TWO_PI/N; return abs(cos(floor(.5+a/r)*r-a)*length(st)); } float box2(vec2 st, vec2 size){ return shape(st*size,u_rotater); } float rect(vec2 _st, vec2 _size){ _size = vec2(0.5)-_size*0.5; vec2 uv = smoothstep(_size,_size+vec2(1e-4),_st); uv *= smoothstep(_size,_size+vec2(1e-4),vec2(1.0)-_st); return uv.x*uv.y; } float hex(vec2 st, float a, float b, float c, float d, float e, float f){ st = st*vec2(2.,6.); vec2 fpos = fract(st); vec2 ipos = floor(st); if (ipos.x == 1.0) fpos.x = 1.-fpos.x; if (ipos.y \u0026lt; 1.0){ return mix(box2(fpos, vec2(0.84,1.)),box2(fpos-vec2(0.03,0.),vec2(1.)),a); } else if (ipos.y \u0026lt; 2.0){ return mix(box2(fpos, vec2(0.84,1.)),box2(fpos-vec2(0.03,0.),vec2(1.)),b); } else if (ipos.y \u0026lt; 3.0){ return mix(box2(fpos, vec2(0.84,1.)),box2(fpos-vec2(0.03,0.),vec2(1.)),c); } else if (ipos.y \u0026lt; 4.0){ return mix(box2(fpos, vec2(0.84,1.)),box2(fpos-vec2(0.03,0.),vec2(1.)),d); } else if (ipos.y \u0026lt; 5.0){ return mix(box2(fpos, vec2(0.84,1.)),box2(fpos-vec2(0.03,0.),vec2(1.)),e); } else if (ipos.y \u0026lt; 6.0){ return mix(box2(fpos, vec2(0.84,1.)),box2(fpos-vec2(0.03,0.),vec2(1.)),f); } return 0.0; } float hex(vec2 st, float N){ float b[6]; float remain = floor(mod(N,64.)); for(int i = 0; i \u0026lt; 6; i++){ b[i] = 0.0; b[i] = step(1.0,mod(remain,2.)); remain = ceil(remain/2.); } return hex(st,b[0],b[1],b[2],b[3],b[4],b[5]); } vec2 mirrorTile(vec2 _st, float _zoom){ _st *= _zoom; if (fract(_st.y * 0.5) \u0026gt; 0.5){ _st.x = _st.x+0.5; _st.y = 1.0-_st.y; } return fract(_st); } float fillY(vec2 _st, float _pct,float _antia){ return smoothstep( _pct-_antia, _pct, _st.y); } vec2 brickTile(vec2 _st, float _zoom){ _st *= _zoom; // Here is where the offset is happening _st.x += step(1., mod(_st.y,4.0)) * 0.5; return fract(_st); } float box(vec2 _st, vec2 _size){ _size = vec2(0.5)-(u_zoom*0.05); vec2 uv = smoothstep(_size,_size+vec2(1e-2),_st); uv *= smoothstep(_size,_size+vec2(1e-4),vec2(1.0)-_st); if(option==0){ return uv.x*uv.y;} else if(option==2) { return uv.x+uv.y; }else if(option==3) { return uv.x-uv.y; } } void main(void){ if (option == 1){ vec2 st = gl_FragCoord.xy/u_resolution.xy; st.y *= u_resolution.y/u_resolution.x; st *= u_zoom; vec2 fpos = fract(st); vec2 ipos = floor(st); float t = u_time*u_rotater; float df = 1.0; df = hex(fpos,ipos.x+ipos.y+t)+(1.0-rect(fpos,vec2(0.7))); gl_FragColor = vec4(mix(vec3(0.),vec3(0.9),step(0.7,df)),1.0); } else if(option ==4){ vec2 st = gl_FragCoord.xy/u_resolution.xy; vec3 color = vec3(0.0); st = mirrorTile(st*vec2(1.,2.),5.); float x = st.x*u_zoom; float a = floor(1.+sin(x*u_rotater)); float b = floor(1.+sin((x+1.)*3.14)); float f = fract(x); color = vec3( fillY(st,mix(a,b,f),0.01) ); gl_FragColor = vec4(10.5,9.5,color); } else { vec2 st = gl_FragCoord.xy/u_resolution.xy; vec3 color = vec3(1.5); st = brickTile(st,u_rotater); color = vec3(box(st,vec2(v1))); gl_FragColor = vec4(10.5,9.5,color); } } Conclusions and Future Work # It is quite interesting to see how it is possible to add multiple features and processes to the same shader without losing any performance, using a simple if, we were able to implement many different patterns, and we were also able to send parameters, modifying how the texture looked. For the future we wish to implement more animated textures, or even, be able to send video or the web cam as shader and try to generate patterns using these sources.\nReferences # Patterns code found on The Book Of Shaders\nhttps://thebookofshaders.com/examples/ https://en.wikipedia.org/wiki/Procedural_texture https://conceptartempire.com/procedural-textures-maps/ "},{"id":13,"href":"/showcase/docs/shortcodes/Kevin-Alvarez-taller-3/Texture-Sampling/","title":"Texture Sampling","section":"Kevin Alvarez Taller 3","content":" Texture Sampling # Background # The main idea is to treat our image like a set of values, this allows us to sample it, or getting a finite number of values from said image, we then, can play with these values adding more effects, or altering the properties of our image, or even applying filters.\nLuma # Luma allows us to see the light intensity in an image, by removing color, it shows areas with greater luminance in a whiter color, and a darker color in areas without light.\nHSV # It is a color space focused mainly on the hue (what color), saturation (how strong) and color (how dark) value of a given image.\nHere you can see it better\nFinally, with this 3 parameters, we map them as rgb values on a new image, getting new effects.\nHSL # This is similar to HSV focusing mainly on Hue, saturation and lightness, and we also focus on converting these values to rgb and mapping them into an image.\nResults # Finally, you can see the different effects, we are also able to add \u0026ldquo;color filtering\u0026rdquo; by playing with the rgb values of the image, keep in mind that these effects don\u0026rsquo;t work with the luma option, since it is in black and white.\nlumaKV.js let lumaShader; let img; let grey_scale; function preload() { lumaShader = readShader(\u0026#39;luma.frag\u0026#39;, { varyings: Tree.texcoords2 }); // image source: https://en.wikipedia.org/wiki/HSL_and_HSV#/media/File:Fire_breathing_2_Luc_Viatour.jpg img = loadImage(\u0026#39;./planeta.jpg\u0026#39;); } function setup() { createCanvas(690, 490, WEBGL); noStroke(); textureMode(NORMAL); option = createSelect(); option.position(10, 10); option.option(\u0026#34;None\u0026#34;, 0); option.option(\u0026#34;Luma\u0026#34;, 1); option.option(\u0026#34;HSV\u0026#34;, 2); option.option(\u0026#34;HSL\u0026#34;, 3); option2 = createSelect(); option2.position(610, 10); option2.option(\u0026#34;None\u0026#34;, 0); option2.option(\u0026#34;Red\u0026#34;, 1); option2.option(\u0026#34;Green\u0026#34;, 2); option2.option(\u0026#34;Blue\u0026#34;, 3); shader(lumaShader); lumaShader.setUniform(\u0026#39;texture\u0026#39;, img); } function draw() { background(0); if (option.value() ==0){ lumaShader.setUniform(\u0026#39;chaval\u0026#39;, 0); } else if (option.value() ==1){ lumaShader.setUniform(\u0026#39;chaval\u0026#39;, 1); }else if (option.value() ==2){ lumaShader.setUniform(\u0026#39;chaval\u0026#39;, 2); }else if (option.value() ==3){ lumaShader.setUniform(\u0026#39;chaval\u0026#39;, 3); } if (option2.value() ==0){ lumaShader.setUniform(\u0026#39;colval\u0026#39;, 0); } else if (option2.value() ==1){ lumaShader.setUniform(\u0026#39;colval\u0026#39;, 1); }else if (option2.value() ==2){ lumaShader.setUniform(\u0026#39;colval\u0026#39;, 2); }else if (option2.value() ==3){ lumaShader.setUniform(\u0026#39;colval\u0026#39;, 3); } quad(-width / 2, -height / 2, width / 2, -height / 2, width / 2, height / 2, -width / 2, height / 2); } luma.frag precision mediump float; // uniforms are defined and sent by the sketch bool grey_scale; uniform sampler2D texture; uniform int chaval; uniform int colval; // interpolated texcoord (same name and type as in vertex shader) varying vec2 texcoords2; uniform sampler2D tex; uniform vec3 hue; vec3 rgb2hsv(vec3 c) { vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0); vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g)); vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r)); float d = q.x - min(q.w, q.y); float e = 1.0e-10; return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x); } vec3 hsv2rgb(vec3 c) { vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0); vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www); return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y); } float luma(vec3 texel) { return 0.299 * texel.r + 0.587 * texel.g + 0.114 * texel.b; } vec3 rgb2hsl( vec3 c ){ float h = 0.0; float s = 0.0; float l = 0.0; float r = c.r; float g = c.g; float b = c.b; float cMin = min( r, min( g, b ) ); float cMax = max( r, max( g, b ) ); l = ( cMax + cMin ) / 2.0; if ( cMax \u0026gt; cMin ) { float cDelta = cMax - cMin; //s = l \u0026lt; .05 ? cDelta / ( cMax + cMin ) : cDelta / ( 2.0 - ( cMax + cMin ) ); Original s = l \u0026lt; .0 ? cDelta / ( cMax + cMin ) : cDelta / ( 2.0 - ( cMax + cMin ) ); if ( r == cMax ) { h = ( g - b ) / cDelta; } else if ( g == cMax ) { h = 2.0 + ( b - r ) / cDelta; } else { h = 4.0 + ( r - g ) / cDelta; } if ( h \u0026lt; 0.0) { h += 6.0; } h = h / 6.0; } return vec3( h, s, l ); } void main() { vec4 salVal; if(chaval == 0 || chaval == 1) { if(chaval==0){ grey_scale=false; } else if(chaval==1){ grey_scale=true; } vec4 texel = texture2D(texture, texcoords2); salVal = grey_scale ? vec4((vec3(luma(texel.rgb))), 1.0) : texel;} if (chaval == 2){ vec4 textureColor = texture2D(texture, texcoords2); vec3 fragRGB = textureColor.rgb; vec3 fragHSV = rgb2hsv(fragRGB).xyz; salVal = vec4(fragHSV, 1.0); } if (chaval == 3){ vec4 textureColor = texture2D(texture, texcoords2); vec3 fragRGB = textureColor.rgb; vec3 fragHSL = rgb2hsl(fragRGB).xyz; salVal = vec4(fragHSL, textureColor.w); } if(colval==0 \u0026amp;\u0026amp; chaval!=1){ salVal.rgb=salVal.rgb*1.0; } if(colval==1 \u0026amp;\u0026amp; chaval!=1){ salVal.rgb=salVal.rgb*vec3(1.0, 0.0, 0.0); } if(colval==2 \u0026amp;\u0026amp; chaval!=1){ salVal.rgb=salVal.rgb*vec3(0.0, 1.0, 0.0); } if(colval==3 \u0026amp;\u0026amp; chaval!=1){ salVal.rgb=salVal.rgb*vec3(0.0, 0.0, 1.0); } gl_FragColor=salVal; } Conclusions and Future Work # We can see some strange effect while using HSV and HSL, it seems to generate pixelation and artifacting in some parts of the image, we wish to know what this happens, and also try to implement a cleaner solution for this unwanted effects, or to detect if this artifacting actually happens because of an element on the image that cannot be seen on the normal color space.\nReferences # http://www.chaospro.de/documentation/html/paletteeditor/colorspace_hsl.htm https://www.ronja-tutorials.com/post/041-hsv-colorspace/ https://support.apple.com/es-es/guide/motion/motn14b9a05a/mac "},{"id":14,"href":"/showcase/docs/shortcodes/Kevin-Alvarez-taller-3/Texturing-and-Coloring/","title":"Texturing and Coloring","section":"Kevin Alvarez Taller 3","content":" Texturing and Coloring # Background # We can use shaders as a texture, this allows us to give any 3d object a more dynamic appearance, shaders are simple scripts that allows us to map a color to each pixel of a given image, using parameters such as model coordinates. In this workshop we faced the challenge of mapping a shader on a non-primitive object, that is, using begin and end shape on p5, we faced some issues, the main one was that the shader was never applied on our shape, to solve this issue we needed to send the texture coordinates to a vertex shader, which is later sent to the fragment shader, this method allowed us to map our shader as a texture.\nUV Mapping # This is the method used, it allows us to project or map a 2d image into a 3d model, it is called UV because it is using U and V as 2d coordinates, it creates a 2d representation of the 3d object and then \u0026ldquo;wraps\u0026rdquo; the 2d image or texture onto it, this is a very convenient way to texture models, although it come with some compromises, like distortion of the textures.\nResults # Now, our first task was to modify our UV to have a blue channel, you can check that out below. you can use the sliders to adjust the color channels.\nUV Shader\nuv.js let uvShader; let colorR; function preload() { // Define geometry directly in clip space (i.e., matrices: Tree.NONE). // Interpolate only texture coordinates (i.e., varyings: Tree.texcoords2). // see: https://github.com/VisualComputing/p5.treegl#handling uvShader = readShader(\u0026#39;/showcase/sketches/shaders/uv.frag\u0026#39;, { matrices: Tree.NONE, varyings: Tree.texcoords2 }); } function setup() { // shaders require WEBGL mode to work createCanvas(470, 470, WEBGL); //noStroke(); // see: https://p5js.org/reference/#/p5/shader shader(uvShader); // https://p5js.org/reference/#/p5/textureMode // best and simplest is to just always used NORMAL textureMode(NORMAL); colorR = createSlider(0, 1, 0.5, 0.01); colorR.position(10, 25); colorR.style(\u0026#39;width\u0026#39;, \u0026#39;280px\u0026#39;); } function draw() { background(0); // clip-space quad (i.e., both x and y vertex coordinates ∈ [-1..1]) // https://p5js.org/reference/#/p5/quad // It\u0026#39;s worth noting (not mentioned in the api docs) that the quad // command also adds the texture coordinates to each of its vertices. uvShader.setUniform(\u0026#39;colorR\u0026#39;, colorR.value()); quad(-1, -1, 1, -1, 1, 1, -1, 1); } uv.frag //------------------------------------------------------------- precision mediump float; // the texture coordinates varying was defined in // the vertex shader by treegl readShader() // open your console and \u0026amp; see! varying vec2 texcoords2; uniform int v1; uniform int u_valueX; uniform int u_valueY; void main() { // glsl swizzling is both handy and elegant // see: https://www.khronos.org/opengl/wiki/Data_Type_(GLSL)#Swizzling gl_FragColor = vec4(texcoords2, 0.5, 1.0); } //------------------------------------------- uv.vert uniform mat4 uModelViewMatrix; uniform mat4 uProjectionMatrix; attribute vec3 aPosition; // Vertex position attribute vec2 aTexCoord; // Vertex texture coordinate attribute vec3 aNormal; // Vertex normal attribute vec4 aVertexColor; // Vertex color // ===================================== varying vec3 vPosition; varying vec2 vTexCoord; void main() { // Store the vertex position for use in the fragment shader vPosition = aPosition; vTexCoord = aTexCoord; // Set the vertex position without any change besides the view transformations // Note: it is important to apply these matrices to get your shape to render in the correct location gl_Position = uProjectionMatrix * uModelViewMatrix * vec4(aPosition, 1.0); } Now, here is the demonstrarion of our sketch, notice that both the fragment and vertex shader are embedded into the same file, this was done simply to ease the process of file tracking.\nYou can use the first slider to adjust the intensity of the channels depending on the mode chosen. If you use the coloring mode, the sliders adjust the individual color channels (Red, Blue and Green), it is recommended to disable the camera using the button, since moving the sliders also moves the camera.\nUV Shader on a random 4 - vertex figure.\nuvWorld.js const vert = `#ifdef GL_ES precision mediump float; #endif // ===================================== // Built in p5js uniforms and attributes // ===================================== uniform mat4 uModelViewMatrix; uniform mat4 uProjectionMatrix; attribute vec3 aPosition; // Vertex position attribute vec2 aTexCoord; // Vertex texture coordinate attribute vec3 aNormal; // Vertex normal attribute vec4 aVertexColor; // Vertex color // ===================================== varying vec3 vPosition; varying vec2 vTexCoord; void main() { // Store the vertex position for use in the fragment shader vPosition = aPosition; vTexCoord = aTexCoord; // Set the vertex position without any change besides the view transformations // Note: it is important to apply these matrices to get your shape to render in the correct location gl_Position = uProjectionMatrix * uModelViewMatrix * vec4(aPosition, 1.0); }`; const frag = `#ifdef GL_ES precision mediump float; #endif // Position in world space varying vec3 vPosition; // Position in texture space varying vec2 vTexCoord; uniform float colorR,colorA,colorG; uniform int option; // Ignored uniform sampler2D uSampler; void main() { // Color based on texture coordinate position vec2 st = vTexCoord.xy; vec4 tex = texture2D(uSampler, vTexCoord); // Go from red to green on one diagonal and white to black on the other. if(option == 0){gl_FragColor =vec4(colorR,vTexCoord.xy,1.0);;} if(option == 1){gl_FragColor =vec4(vTexCoord.xy,colorR,1.0);;} if(option == 2){gl_FragColor =vec4(colorR,colorG,colorA,1.0);;} // R,G,B,A }`; let valX=4,valY=2,valZ=0.1; let camopt=true; let shdr; let pos1=0,pos2=10,pos3=100,pos4=10,pos5=50,pos6=-100; function setup() { button = createButton(\u0026#34;Randomize\u0026#34;); button.mousePressed(changeCoords); button.position(10,470); button2 = createButton(\u0026#34;Enable / Disable Cam\u0026#34;); button2.mousePressed(changeCam); button2.position(330,460); createCanvas(470, 470, WEBGL); shdr = createShader(vert, frag); textureMode(NORMAL); noStroke(); colorR = createSlider(0,1 , 0.05, 0.01); colorR.position(10, 25); colorR.style(\u0026#39;width\u0026#39;, \u0026#39;280px\u0026#39;); colorA = createSlider(0, 1, 0.05, 0.01); colorA.position(10, 45); colorA.style(\u0026#39;width\u0026#39;, \u0026#39;280px\u0026#39;); colorG = createSlider(0, 1, 0.05, 0.01); colorG.position(10, 65); colorG.style(\u0026#39;width\u0026#39;, \u0026#39;280px\u0026#39;); option = createSelect(); option.position(10, 450); option.option(\u0026#34;Blue/ Red\u0026#34;, 0); option.option(\u0026#34;Green / Blue\u0026#34;, 1); option.option(\u0026#34;Coloring\u0026#34;, 2); } function changeCam(){ camopt=!camopt; print (camopt); if(camopt){ valX=4;valY=2;valZ=0.1; } else{ valX=0;valY=0;valZ=0; } } function changeCoords(){ pos1=random(-250,250); pos2=random(-250,250); pos3=random(-250,250); pos4=random(-250,250); pos5=random(-250,250); pos6=random(-250,250); } function draw() { background(255); shader(shdr); orbitControl(valX, valY, valZ); if(option.value()==0){ styler=0; shdr.setUniform(\u0026#39;option\u0026#39;,styler); }else if(option.value()==1){ styler=1; shdr.setUniform(\u0026#39;option\u0026#39;,styler); }else if(option.value()==2){ styler=2; shdr.setUniform(\u0026#39;option\u0026#39;,styler); } shdr.setUniform(\u0026#39;colorR\u0026#39;, colorR.value()); shdr.setUniform(\u0026#39;colorA\u0026#39;, colorA.value()); shdr.setUniform(\u0026#39;colorG\u0026#39;, colorG.value()); beginShape(); //Triangulo 2d normal(2, 1, 1); //Cara 1 vertex(pos1, pos2,0,-0.5); vertex(pos3, pos4,0,3.5); vertex(pos5, pos6,0,0); endShape(); } Conclusions and Future Work # We were able to apply a texture to a \u0026ldquo;custom\u0026rdquo; shape by using both a vertex and frament shader, and sending the relevant information (texture coordinates), sadly we were unable to apply the shader using the three channels at the same time, since we were limited by applying color using the coordinates, for future work, so we wish to improve the shader mapping to include the three channels, having a better efecto, also, it would be interesting to apply different shaders and images using this methos.\nReferences # https://conceptartempire.com/uv-mapping-unwrapping/ https://riptutorial.com/opengl/example/32426/using-textures-in-glsl-shaders https://docs.unity3d.com/es/2019.4/Manual/Shaders.html https://discourse.processing.org/t/beginshape-and-custom-shaders/35021 (This one was specially useful) "},{"id":15,"href":"/showcase/docs/shortcodes/Taller-1/Taller1/","title":"Taller1","section":"Taller 1","content":" Taller 1 # Intoduction # An image kernel is a small matrix used to apply effects like the ones you might find in Photoshop or Gimp, such as blurring, sharpening, outlining or embossing. They\u0026rsquo;re also used in machine learning for \u0026lsquo;feature extraction\u0026rsquo;, a technique for determining the most important portions of an image. In this context the process is referred to more generally as \u0026ldquo;convolution\u0026rdquo;.\nTo see how they work, let\u0026rsquo;s start by inspecting a black and white image. The matrix on the left contains numbers, between 0 and 255, which each correspond to the brightness of one pixel in a picture of a face. The large, granulated picture has been blown up to make it easier to see; the last image is the \u0026ldquo;real\u0026rdquo; size.\nPicture one ... ) Context # For each 3x3 block of pixels in the original image , we multiply each pixel by the corresponding entry of the kernel and then take the sum. That sum becomes a new pixel in the result image.\nOne subtlety of this process is what to do along the edges of the image. For example, the top left corner of the input image only has three neighbors. One way to fix this is to extend the edge values out by one in the original image while keeping our new image the same size.\nFor example, this is the kernel for the blue effect that you can apply and test below: Blur Kernel ... ) Results # Below you can see the code that was used to do the process of convolution p5-iframe markdown A=0; B=0; C=0; D=0; E=1; F=0; G=0; H=0; I=0; kernel = [[A, B, C ], [ D, E, -F ], [G, H, I ]]; function preload() { img = loadImage(\u0026#34;/showcase/sketches/skull.jpg\u0026#34;); } function setup() { createCanvas(550, 550); image(img, 240, 0); edgeImg = createImage(img.width, img.height); edgeImg.loadPixels(); ASlider = createSlider(-255, 255, 1); ASlider.position(180, 300); BSlider = createSlider(-255, 255, 1); BSlider.position(180, 320); CSlider = createSlider(-255, 255, 1); CSlider.position(180, 340); DSlider = createSlider(-255, 255, 1); DSlider.position(180, 360); ESlider = createSlider(-255, 255,1); ESlider.position(180, 380); FSlider = createSlider(-255, 255, 1); FSlider.position(180, 400); GSlider = createSlider(-255, 255, 1); GSlider.position(180, 420); HSlider = createSlider(-255, 255, 1); HSlider.position(180, 440); ISlider = createSlider(-255, 255, 1); ISlider.position(180, 460); text(\u0026#34;Aplly current slider value: \u0026#34;,380,310); button = createButton(\u0026#39;Apply Slider\u0026#39;); button.position(540, 300); button.mousePressed(appslider); text(\u0026#34;Aplly blur effect: \u0026#34;,380,350); button = createButton(\u0026#39;Blur\u0026#39;); button.position(540, 340); button.mousePressed(blur); text(\u0026#34;Aplly default values: \u0026#34;,380,390); button = createButton(\u0026#39;Identity\u0026#39;); button.position(540, 380); button.mousePressed(identity); noLoop(); } function identity() { clear(); A=0; B=0; C=0; D=0; E=1; F=0; G=0; H=0; I=0; kernel = [[A, B, C ], [ D, E, -F ], [G, H, I ]]; redraw(); } function appslider() { clear(); A = ASlider.value(); B = BSlider.value(); C = CSlider.value(); D = DSlider.value(); E = ESlider.value(); F = FSlider.value(); G = GSlider.value(); H = HSlider.value(); I = ISlider.value(); kernel = [[A, B, C ], [ D, E, -F ], [G, H, I ]]; redraw(); } function blur() { clear(); A=0.0625; B=0.125; C=0.0625; D=0.125; E=0.25; F=0.125; G=0.0625; H=0.125; I=0.0625; kernel = [[A, B, C ], [ D, E, -F ], [G, H, I ]]; redraw(); } function botsobel(){ clear(); A=-1; B=-0; C=-1; D=-2; E= 0; F= 2; G=-1; H=0; I=0; kernel = [[A, B, C ], [ D, E, -F ], [G, H, I ]]; redraw(); } function draw() { text(\u0026#34;Valor Slider A: \u0026#34;+ASlider.value(),20,300); text(\u0026#34;Valor Slider B: \u0026#34;+BSlider.value(),20,320); text(\u0026#34;Valor Slider C: \u0026#34;+CSlider.value(),20,340); text(\u0026#34;Valor Slider D: \u0026#34;+DSlider.value(),20,360); text(\u0026#34;Valor Slider E: \u0026#34;+ESlider.value(),20,380); text(\u0026#34;Valor Slider F: \u0026#34;+FSlider.value(),20,400); text(\u0026#34;Valor Slider G: \u0026#34;+GSlider.value(),20,420); text(\u0026#34;Valor Slider H: \u0026#34;+HSlider.value(),20,440); text(\u0026#34;Valor Slider I: \u0026#34;+ISlider.value(),20,460); for (let x = 1; x \u0026lt; img.width - 1; x++) { for (let y = 1; y \u0026lt; img.height - 1; y++) { let sum = 0; for (kx = -1; kx \u0026lt;= 1; kx++) { for (ky = -1; ky \u0026lt;= 1; ky++) { let xpos = x + kx; let ypos = y + ky; let pos = (y + ky)*img.width + (x + kx); let valr = red(img.get(xpos, ypos)); let valg = green(img.get(xpos, ypos)); let valb = blue(img.get(xpos, ypos)); let val = (valr*0.299) + (valg*0.587) + (valb*0.114); sum += kernel[ky+1][kx+1] * val; } } edgeImg.set(x, y, color(sum, sum, sum)); } } edgeImg.updatePixels(); image(edgeImg, 240, 0); } And here is the demo where you can do all the tests\nConclusions and Future work # CONCLULIONS:\nImage processing done by software and sequentially takes too much processing time. The application of filters is used to improve the quality of the image, by eliminating noise data, highlighting some necessary aspect of the image or only leaving some characteristics of the image and eliminating the rest of the data. FUTURE WORK:\nAs future work, it is hoped to be able to apply a greater number of filters to the same image, individually and combined, since the combination of different kernels can give better results. Depending on the application, you may want to apply a filter that removes blemishes or smoothes an image, and then apply another that detects edges.\nAnother aspect to focus future work on is performance, where changes can be seen immediately with any change in kernel values, so you can have a better interpretation of the image as desired.\nREFERENCES:\nhttps://setosa.io/ev/image-kernels/ https://en.wikipedia.org/wiki/Convolution#Visual_explanation https://en.wikipedia.org/wiki/Kernel_%28image_processing%29 https://visualcomputing.github.io/docs/illusions/masking/\n"},{"id":16,"href":"/showcase/docs/shortcodes/Taller-1/webgltest/","title":"Webgltest","section":"Taller 1","content":" Resultados # p5-iframe markdown Conclusiones y Trabajo Futuro # "},{"id":17,"href":"/showcase/docs/shortcodes/Taller-2/3d-Brush/","title":"3d Brush","section":"Taller 2","content":" 3d Brush and Rasterization # Is the process of taking an image, described in a vector graphics format and converting it into a series of pixels, dots, or almost any shape.\nWhen these shapes are together, they will form the original image.\nVector graphics are a set of mathematical statements which place lines shapes in a 3d or 2d enviroment, being generally a group of mathematical curves, these are great for printing or image manipulation, even when enlarger they retain detail and quality, while raster graphics uses bitmaps to store information, this can limit the quality depending on resolution and file size.\nResults # Using this technique we want to extend the idea of a 3d brush, into a 3d painting application where we could be able to import files, in this case an image and play with it, as an example we can use the next image\nNow we will take this picture and we will try to rasterize it, we will divide the image into many tiles, each individual tile will be analyzed and according to its contrast we will paint it black or white, black for high and white for low. Also the darker the tile, the closer to the screen it will be.\nWe have many issues, since we are using a naive approach, we suffer a great loss in performance, and we need a very good hardware to run this app smoothly.\np5-iframe markdown let toggle_3d_gui; let auto_rotate; // select let mode; // 3d gui let color1; let color2; // Brush controls let color; let depth; let brush; let escorzo; let points; let record; //Cam Controls let easycam; let state; let foreshortening = false; let raster; // bulls shape let circled = false; // resume animation let frames = 0; // spaces let sphere1; let sphere2; let input; let img2; let img; function handleFile(file) { print(file); if (file.type === \u0026#39;image\u0026#39;) { img2 = loadImage(file.data, \u0026#39;\u0026#39;); img2.hide(); } else { img2 = null; } } function setup() { input = createFileInput(handleFile); input.position(0, 500); createCanvas(700, 510, WEBGL); if(img2!=null){ img=img2; } else { img = loadImage(\u0026#34;/showcase/sketches/skulltest.jpg\u0026#34;); } TileSlider = createSlider(5, 200, 50, 1); TileSlider.position(20, 50); textureMode(NORMAL); raster = createCheckbox(\u0026#39;toggle 3d gui\u0026#39;,true); raster.style(\u0026#39;color\u0026#39;, \u0026#39;black\u0026#39;); raster.position(10, 50); toggle_3d_gui = createCheckbox(\u0026#39;toggle 3d gui\u0026#39;, true); toggle_3d_gui.style(\u0026#39;color\u0026#39;, \u0026#39;black\u0026#39;); toggle_3d_gui.position(10, 10); toggle_3d_gui.changed(() =\u0026gt; { if (toggle_3d_gui.checked()) { color1.show(); color2.show(); } else { color1.hide(); color2.hide(); } }); color1 = createColorPicker(\u0026#39;cyan\u0026#39;); color2 = createColorPicker(\u0026#34;#000000\u0026#34;); easycam = createEasyCam(); let state = { distance: 450, // scalar center: [0, 0, 0], // vector rotation: [0, 0, 0, -1], // quaternion }; easycam.setState(state, 1000); escorzo = true; perspective(); // brush stuff points = []; depth = createSlider(0,1 ,0.01, 0.05); depth.position(5, 480); depth.style(\u0026#39;width\u0026#39;, \u0026#39;580px\u0026#39;); color = createColorPicker(\u0026#39;#ed225d\u0026#39;); color.position(width - 70, 40); // select initial brush brush = sphereBrush; } function draw() { update(); background(color1.color()); push(); strokeWeight(0.8); stroke(\u0026#39;magenta\u0026#39;); grid({ dotted: false }); pop(); for (const point of points) { push(); translate(point.worldPosition); brush(point); pop(); } fill(color2.color()); noStroke(); tiles = TileSlider.value();; tileSize = width/tiles; scale(0.5) if(img2 != null){ img=img2; } valX=0; valY=0; if (img) { for (x = 0; x \u0026lt; tiles; x++) { for (y = 0; y \u0026lt; tiles; y++) { c = img.get(int(x*tileSize),int(y*tileSize)); b = map(brightness(c),0,255,1,0); z = map(b,0,1,-150,150); push(); translate(x*tileSize - width/2, y*tileSize - height/2, z); sphere(tileSize*b*0.8); pop(); print(z) } } } print(valX,valY); pop(); push(); translate(tiles/2*tileSize - width/2, tiles/2*tileSize - height/2); sphere1 = mMatrix(); axes(30); noStroke(); fill(color1.color()); sphere(15); pop(); push(); translate(1*tileSize - width/2+100, 1*tileSize - height/2+20); rotateZ(frames * 0.01); sphere2 = mMatrix(); axes(30); noStroke(); fill(color2.color()); sphere(15); pop(); if (toggle_3d_gui.checked()) { let sphere1Projection = treeLocation([0, 0, 0], { from: sphere1, to: \u0026#39;SCREEN\u0026#39; }); beginHUD(); color1.position(sphere1Projection.x, sphere1Projection.y); endHUD(); let sphere2Projection = treeLocation([0, 0, 0], { from: sphere2, to: \u0026#39;SCREEN\u0026#39; }); beginHUD(); color2.position(sphere2Projection.x, sphere2Projection.y); endHUD(); } } function update() { let dx = abs(mouseX - pmouseX); let dy = abs(mouseY - pmouseY); speed = constrain((dx + dy) / (2 * (width - height)), 0, 1); if (record) { points.push({ worldPosition: treeLocation([mouseX, mouseY, depth.value()], { from: \u0026#39;SCREEN\u0026#39;, to: \u0026#39;WORLD\u0026#39; }), color: color.color(), speed: speed }); } } function sphereBrush(point) { push(); noStroke(); // TODO parameterize sphere radius and / or // alpha channel according to gesture speed fill(point.color); sphere(1); pop(); } function keyPressed() { if (key === \u0026#39;r\u0026#39;) { record = !record; } if (key === \u0026#39;p\u0026#39;) { escorzo = !escorzo; escorzo ? perspective() : ortho(); } if (key == \u0026#39;c\u0026#39;) { points = []; } } function mouseWheel(event) { //comment to enable page scrolling return false; } Something quite interesting happened when we added normal mapping or bump mapping images, we could these images almost showing a 3d object, even better results were given when the image is black and white.\nhere some examples\nOriginal Image # Obtained Object # Normal Mapping # Is a texture mapping technique used for faking the lighting of bumps and dents – an implementation of bump mapping. It is used to add details without using more polygons. They are a special kind of texture that allow you to add surface detail such as bumps, grooves, and scratches to a model which catch the light as if they are represented by real geometry.\nFuture Work # We want to improve our implementation on the 3d rasterizer, removing the useless black dots, as well as improving speed, we also want to try to implement a more immersive way to control the camera, the color selection system and the 3d brush\nReferences # Create your own 3d rasterizer By Tim Roden Broeker https://timrodenbroeker.de/rasterize3d/ P5 EasyCam https://diwi.github.io/p5.EasyCam/ Normal mapping https://learnopengl.com/Advanced-Lighting/Normal-Mapping The Bump Mapping of Jurassic Park: Trespasser - Per-Pixel Lighting in 1998 https://www.fz.se/forum/trad/448946-the-bump-mapping-of-jurassic-park-trespasser-per-pixel-lighting-in-1998 "},{"id":18,"href":"/showcase/docs/shortcodes/Taller-2/Rasterization/","title":"Rasterization","section":"Taller 2","content":" Taller 2 # When a low-quality image is zoomed in or processed, the edges tend to become jagged or staggered. To solve this problem, we must apply smoothing to the figure. The process is carried out by generating a subdivision of the original pixels of the image. image in a greater number of pixels, to perform a smoothing of the edges with the use of barycentric coordinates, triangles are calculated on the original image.\nBackground # Rasterization # It is the task of taking an image and converting it into a set of pixels, points or lines that, when shown together, allow the original image to be seen through the forms with which it is represented, the rasterized image can be displayed on a computer screen, or as a video, among other ways.\nAliasing # In visual computing, images are displayed on monitors with pixels, which are nothing more than tiny squares. So, when a straight line appears in the image, it is very easy to represent it with pixels because they are straight, but when a diagonal edge is represented, regardless of the degree of inclination, the small squares are stacked next to each other, forming the well-known phenomenon such as Aliasing, “steps” or “saw teeth”.\nAnti Aliasing # Smoothing is nothing more than a post-processing filter, and is therefore performed after generating the image, which smooths these jagged edges so that lines that are not vertical or horizontal appear more homogeneous, eliminating or at least mitigating this stair effect.\nImplementation # Like the smoothing process in an image post-processing process, what is done is a subdivision of an image space into much smaller frames, in order to blur the steps present at the edges of the image, actually it can generate many more steps but of a smaller size, which gives the sensation of elimination or at least the mitigation is carried out. With the use of the barycentric coordinates we can an area in that created subspace, recalculate the value of the color for each of the subframes that are part of the area of ​​the triangle, smoothing the edges of the original figure.\nPress R to change apply antialiasing on a random position\nResults # p5-iframe markdown let ROWS = 20; let COLS = 20; let LENGTH = 10; let quadrille; let row0, col0, row1, col1, row2, col2; let img; let c1, c2, c3 ; let index, r0, g0, b0, r1, g1, b1, r2, g2, b2, d; function preload() { img = loadImage(\u0026#39;/showcase/sketches/vida.PNG\u0026#39;); } function setup() { ROWS = Math.floor(img.height/LENGTH); COLS = Math.floor(img.width/LENGTH); createCanvas(1000, 1000); pixelDensity(1); img.loadPixels(); loadPixels(); quadrille = createQuadrille(COLS, img); randomize(); index = ((col0* LENGTH + LENGTH / 2) + (row0* LENGTH + LENGTH / 2)*(COLS*LENGTH))*4; r0 = img.pixels[index]; g0 = img.pixels[index+1]; b0 = img.pixels[index+2]; index = ((col1* LENGTH + LENGTH / 2) + (row1* LENGTH + LENGTH / 2)*(COLS*LENGTH))*4; r1 = img.pixels[index]; g1 = img.pixels[index+1]; b1 = img.pixels[index+2]; index = ((col2* LENGTH + LENGTH / 2) + (row2* LENGTH + LENGTH / 2)*(COLS*LENGTH))*4; r2 = img.pixels[index]; g2 = img.pixels[index+1]; b2 = img.pixels[index+2]; quadrille.colorizeTriangle(row0, col0, row1, col1, row2, col2, [r0, g0, b0], [r1, g1, b1], [r2, g2, b2]); } function draw() { background(\u0026#39;#060621\u0026#39;); drawQuadrille(quadrille, { cellLength: LENGTH, outlineWeight: 0.01,outline: \u0026#39;green\u0026#39; }); tri(); } function tri() { push(); stroke(\u0026#39;cyan\u0026#39;); strokeWeight(3); noFill(); triangle(col0 * LENGTH + LENGTH / 2, row0 * LENGTH + LENGTH / 2, col1 * LENGTH + LENGTH / 2, row1 * LENGTH + LENGTH / 2, col2 * LENGTH + LENGTH / 2, row2 * LENGTH + LENGTH / 2); pop(); } function keyPressed() { randomize(); if (key === \u0026#39;r\u0026#39;) { index = ((col0* LENGTH + LENGTH / 2) + (row0* LENGTH + LENGTH / 2)*(COLS*LENGTH))*4; r0 = img.pixels[index]; g0 = img.pixels[index+1]; b0 = img.pixels[index+2]; index = ((col1* LENGTH + LENGTH / 2) + (row1* LENGTH + LENGTH / 2)*(COLS*LENGTH))*4; r1 = img.pixels[index]; g1 = img.pixels[index+1]; b1 = img.pixels[index+2]; index = ((col2* LENGTH + LENGTH / 2) + (row2* LENGTH + LENGTH / 2)*(COLS*LENGTH))*4; r2 = img.pixels[index]; g2 = img.pixels[index+1]; b2 = img.pixels[index+2]; quadrille.colorizeTriangle(row0, col0, row1, col1, row2, col2, [r0, g0, b0], [r1, g1, b1], [r2, g2, b2]); } } function randomize() { var aux = int(random(0, COLS-4)); var auy = int(random(0, COLS-4)); var auxX = aux+4; var auyY = auy+4; col0 = aux; row0 = auy; col1 = aux; row1 = auyY; col2 = auxX; row2 = auy; } Conclusiones y Trabajo Futuro # We\u0026rsquo;ve managed to create an anti aliasing effect, where we could see how the image becomes softer, sadly to have a more uniform effect, we have to use the same triangle all the time, so the effect is not as seamless as desired.\nImprove the rasterization algorithm, changing the naive approach to a better one, able to run trough hardware, making the process faster, and to be able to use even smaller triangles for better results.\n"},{"id":19,"href":"/showcase/docs/shortcodes/Taller-2/WebCamTest/","title":"Web Cam Test","section":"Taller 2","content":" Taller 2 # Introduccion # Contexto # Resultados # # "}]